---
title: "Supporting Information 'Wildlife health perceptions and monitoring practices in globally distributed protected areas'"
author:
  - name: Diego Montecino-Latorre
    affiliations:
      - name: Wildlife Conservation Society - Health Program
        city: Bronx
        state: New York
  - name: Mathieu Pruvot
    affiliations:
      - name: Wildlife Conservation Society - Health Program
        city: Bronx
        state: New York
  - name: Sarah H Olson
    affiliations:
      - name: Wildlife Conservation Society - Health Program
        city: Bronx
        state: New York
number-sections: true
editor: visual
execute:
  cache: false
format: 
  html:
    self-contained: true
# opts_chunk: 
#     R.options: 
#     knitr.table.html.attr: "quarto-disable-processing=true"
# code-link: false
---

```{r load packages}
#| echo: false
#| eval: true
#| message: false
#| warning: false

knitr::opts_chunk$set(fig.pos = "H", out.extra = "")

source("../R/load_packages.R")
```

```{r remove other audience answering the survey}
#| echo: false
#| eval: true
#| message: false
#| warning: false

terrestrial_data<-readRDS("../data/terrestrial_data.RDS")

number_responses_before_audience_remove<-nrow(terrestrial_data)

#source("R/remove_other_audience.R")
terrestrial_data<-terrestrial_data %>% filter(position!="Other")

number_responses_after_audience_remove<-nrow(terrestrial_data)

```

## Results of non-local responses

### Perceptions regarding wildlife health importance in conservation and potential consequences of pathogen transmission among wildlife, domestic animals, and people.

```         
```

<!-- Under section 1, we asked managers to rank their perceptions regarding wildlife health  -->

<!-- and potential consequences of pathogen transmission among wildlife, domestic -->

<!-- animals and people. -->

<!-- Wildlife health, including infectious and non-infectious diseases, is important to achieve the conservation goals of the protected areas where I work -->

<!-- Pathogens carried by wildlife inhabiting the protected area I work in can affect livestock health    -->

<!-- Pathogens carried by wildlife inhabiting the protected area I work in can affect public health -->

<!-- Human or livestock pathogens can affect wildlife populations inhabiting the protected area I work  -->

```{r section 1}
#| echo: false
#| message: false
#| warning: false
#| eval: true

section_1 =
  terrestrial_data %>% filter(local==F) %>% 
  select(#survey,
           wildlife_health_important,
           hum_liv_path_affect_wildlife,
           wildlife_path_affect_livestock,
           wildlife_path_affect_phealth)

strongly_agree_or_agree_wh_important<-
section_1 %>% 
  count(wildlife_health_important) %>% 
  filter(wildlife_health_important%in%c("Agree", "Strongly agree")) %>% 
  pull(n) %>% 
  sum()

strongly_agree_or_agree_hum_liv_impact_wh<-
section_1 %>% 
  count(hum_liv_path_affect_wildlife) %>% 
  filter(hum_liv_path_affect_wildlife%in%c("Agree", "Strongly agree")) %>% 
  pull(n) %>% 
  sum()

strongly_agree_or_agree_wl_impact_hum<-
section_1 %>% 
  count(wildlife_path_affect_phealth) %>% 
  filter(wildlife_path_affect_phealth%in%c("Agree", "Strongly agree")) %>% 
  pull(n) %>% 
  sum()

neutral_wl_impact_hum<-
section_1 %>% 
  count(wildlife_path_affect_phealth) %>% 
  filter(wildlife_path_affect_phealth%in%c("Neutral")) %>% 
  pull(n) %>% 
  sum()

agree_wl_impact_hum<-
section_1 %>% 
  count(wildlife_path_affect_phealth) %>% 
  filter(wildlife_path_affect_phealth%in%c("Agree")) %>% 
  pull(n) %>% 
  sum()


strongly_agree_or_agree_wl_impact_liv<-
section_1 %>% 
  count(wildlife_path_affect_livestock) %>% 
  filter(wildlife_path_affect_livestock%in%c("Agree", "Strongly agree")) %>% 
  pull(n) %>% 
  sum()

neutral_wl_impact_liv<-
section_1 %>% 
  count(wildlife_path_affect_livestock) %>% 
  filter(wildlife_path_affect_livestock%in%c("Neutral")) %>% 
  pull(n) %>% 
  sum()

```

<!-- `r as.character(english::as.english(strongly_agree_or_agree_wh_important)) |> stringr::str_to_title()` (`r round(strongly_agree_or_agree_wh_important/nrow(terrestrial_data[terrestrial_data$local==F,])*100,1)`%) global respondents either strongly agreed or agreed with the affirmation “wildlife health is important to achieve the conservation goals of protected area(s) where I work in”. Most respondents also strongly agreed or agreed with the affirmation “human or livestock pathogens can affect wildlife populations inhabiting the protected area(s) where I work” (`r round(strongly_agree_or_agree_hum_liv_impact_wh/nrow(terrestrial_data[terrestrial_data$local==F,])*100,1)`%) and "pathogens carried by wildlife inhabiting the protected area(s) where I work in can affect human health” (`r round(strongly_agree_or_agree_wl_impact_hum/nrow(terrestrial_data[terrestrial_data$local==F,])*100,1)`%). However, for the latter case `r round(neutral_wl_impact_hum/nrow(terrestrial_data[terrestrial_data$local==F,])*100,1)`% respondents remained neutral and “Agree” was the most common response (`r round(agree_wl_impact_hum/nrow(terrestrial_data[terrestrial_data$local==F,])*100,1)`%). Regarding the affirmation “pathogens carried by wildlife inhabiting the protected area(s) where I work in can affect livestock health”, most respondents remained neutral (`r round(neutral_wl_impact_liv/nrow(terrestrial_data[terrestrial_data$local==F,])*100,1)`%) although the percentage of respondents that either strongly agreed or agreed was larger (`r round(strongly_agree_or_agree_wl_impact_liv/nrow(terrestrial_data[terrestrial_data$local==F,])*100,1)`%). The ranking distribution with the overall agreement with the affirmations is shown in Figure 1.   -->

```{r section 1 plot}
#| echo: false
#| message: false
#| warning: false
#| eval: true
#| fig-height: 3.5
#| fig-align: center
#| fig-cap: Figure S1. Distribution of the level of agreement among protected area data managers with statements 'wildlife health is important to achieve the conservation goals of protected area(s) where I work in' (row 1), 'human or livestock pathogens can affect wildlife populations inhabiting the protected area(s) where I work in' (row 2), 'pathogens carried by wildlife inhabiting the protected area(s) where I work in can affect human health' (row 3), and 'pathogens carried by wildlife inhabiting the protected area(s) where I work in can affect livestock health' (row 4).

library(ggplot2)
library(camcorder)
library(RColorBrewer)

likert_theme <-
  theme_gray() +
  theme(text = element_text(size = 60),
        plot.title = element_text(size = 60, face = "bold",
                                  margin = margin(10, 0, 10, 0)),
        plot.margin = unit(c(2.4,0,2.4,.4), "cm"),
        plot.background = element_rect(linewidth = 5, color = "black"),
        panel.grid = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_text(colour = "black"),
        axis.ticks = element_blank(),
        axis.title = element_blank(),
        panel.background = element_blank(),
        strip.background  = element_blank(),
        legend.position = "none")


section_1 =
  terrestrial_data %>% filter(local==F) %>% 
  select(#survey,
           wildlife_health_important,
           hum_liv_path_affect_wildlife,
           wildlife_path_affect_livestock,
           wildlife_path_affect_phealth)


section_1<-
  section_1 %>%
  #dplyr::select(-survey) %>%
  tidyr::pivot_longer(cols = everything()) %>%
  dplyr::group_by(name, value, .drop=FALSE) %>%
  dplyr::count(name,value) %>%
  dplyr::rename(c("question"="name", "rank"="value", "num_responses"="n")) %>%
  ungroup() %>%
  complete(question,rank,fill=list(num_responses=0)) %>%
  mutate(rank=factor(rank,
                     levels = rev(c("Strongly agree",
                                "Agree",
                                "Neutral",
                                "Somewhat Disagree",
                                "Disagree",
                                "Strongly disagree")),
                     labels = rev(c("Strongly\nagree",
                                "Agree",
                                "Neutral",
                                "Somewhat\ndisagree",
                                "Disagree",
                                "Strongly\ndisagree")))) %>%
  mutate(question=factor(question,
                         levels = rev(c("wildlife_health_important",
                                        "hum_liv_path_affect_wildlife",
                                        "wildlife_path_affect_phealth",
                                        "wildlife_path_affect_livestock")),
                         labels = rev(c("Wildlife health\nis important",
                                        "Human and livestock\npathogens can\nimpact wildlife\nhealth",
                                        "Wildlife pathogens can\nimpact human health",
                                        "Wildlife pathogens can\nimpact livestock health"))))



#strat recording plot development setting the reald width and height
# gg_record(
#   dir = file.path(tempdir(), "recording100"), # where to save the recording
#   device = "png", # device to use to save images
#   width = 7,      # width of saved image
#   height = 3.5,     # height of saved image
#   units = "in",   # units for width and height
#   dpi = 300       # dpi to use when saving image
# )
# 
# gg_resize_film(
#   height = 3.6,
#   width = 6.4,
#   units = "in",
#   dpi = 300
# )


# plot
# create x labels for questions

plot_section_1<-
  ggplot(data = section_1 %>% arrange(rank)) +
  likert_theme +
  theme(text = element_text(size = 10.5),
        plot.title = element_text(size = 10, hjust = 0.5, vjust = 3.5, face = "plain",
                                  margin = margin(1, 2, 1, 1)),
        plot.margin = unit(c(0.3,0,0.1,.4), "cm"),
        plot.background = element_rect(linewidth = 1, color = "black")) +
  geom_col(aes(question, num_responses, fill = rank)) +
  geom_label(aes(question, 
                 num_responses, 
                 label = replace(num_responses, list = c(num_responses==0), values = NA)),
            position = position_stack(vjust = .5),
            fontface = "bold",
            size = 2,
            label.padding = unit(0.1, "lines")) +
  
  # scale_fill_brewer(type = "div") +
  scale_fill_manual(values = brewer.pal(n = 9, name = "GnBu")[2:7]) +
  facet_wrap(.~rank, nrow = 1) +
  coord_flip()+
  ggtitle("Agreement ranking")

 plot_section_1


  # ggsave("../Appendix/plot_section_1.png",
  #        plot = plot_section_1,
  #        height = 3.6,
  #        width = 6.4,
  #        units = "in",
  #        dpi = 600)
  



# plot_section_1
#knitr::include_graphics("plots/plot_section_1.png")

```

```         
```

### Overall frequency of encounters with dead, sick, or injured wildlife in protected areas and their documentation when found during patrols

```         
```

```{r section 2A }
#| echo: false
#| message: false
#| warning: false
#| eval: true

section_2 <-
  terrestrial_data %>% filter(local==F) %>% 
  select(dead_found,
           sick_injured_found,
           dead_wl_recorded,
           sick_wl_recorded,
           injured_wl_recorded)

# Dead
dead_found<-section_2 %>% count(dead_found)
dead_found$dead_found<-factor(dead_found$dead_found, 
                              levels = c("Always", "Very frequently", 
                                         "Occasionally", "Sometimes",
                                         "Rarely", "Very rarely", "Never"))

dead_found<-dead_found[order(dead_found$dead_found),]

dead_found_btn_v_rarely_v_frequently<-
dead_found %>% 
  arrange(-n) %>% 
  slice(1:5) %>% pull(n) %>%  sum()
  

dead_recorded<-section_2 %>% 
  filter(dead_found%in%c("Very frequently", "Occasionally", "Sometimes",
                           "Rarely", "Very rarely")) %>% 
  count(dead_wl_recorded) %>% 
  filter(dead_wl_recorded=="Yes") %>% 
  pull(n)


#Sick
sick_injured_found<-section_2 %>% count(sick_injured_found)
sick_injured_found$sick_injured_found<-factor(sick_injured_found$sick_injured_found, 
                              levels = c("Always", "Very frequently", 
                                         "Occasionally", "Sometimes",
                                         "Rarely", "Very rarely", "Never"))

sick_injured_found<-sick_injured_found[order(sick_injured_found$sick_injured_found),]

sick_injured_found_btn_v_rarely_ocassionally<-
sick_injured_found %>% 
  arrange(-n) %>% 
  slice(1:4) %>% pull(n) %>%  sum()
  

sick_recorded<-section_2 %>% 
  filter(sick_injured_found%in%c("Occasionally", "Sometimes", "Rarely", "Very rarely")) %>% 
  count(sick_wl_recorded) %>% 
  filter(sick_wl_recorded=="Yes") %>% 
  pull(n)


#Injured

injured_recorded<-section_2 %>% 
  filter(sick_injured_found%in%c("Occasionally", "Sometimes", "Rarely", "Very rarely")) %>% 
  count(injured_wl_recorded) %>% 
  filter(injured_wl_recorded=="Yes") %>% 
  pull(n)


```

<!-- `r as.character(english::as.english(dead_found_btn_v_rarely_v_frequently)) |> stringr::str_to_title()` (`r round(dead_found_btn_v_rarely_v_frequently/nrow(terrestrial_data[terrestrial_data$local==F,])*100,1)`%) ranked the encountering with dead animals in the protected area between "Very rarely" and "Very frequently", whilst `r round(dead_recorded/dead_found_btn_v_rarely_v_frequently*100,1)`% of these respondents answered that these animals are documented as a specific category if found during patrols. -->

<!-- `r as.character(english::as.english(sick_injured_found_btn_v_rarely_ocassionally)) |> stringr::str_to_title()` (`r round(sick_injured_found_btn_v_rarely_ocassionally/nrow(terrestrial_data[terrestrial_data$local==F,])*100,1)`%) ranked the encountering with sick or injured animals in the protected area between "Very rarely" and "Occasionally", whilst `r round(sick_recorded/sick_injured_found_btn_v_rarely_ocassionally*100,1)`% and `r round(injured_recorded/sick_injured_found_btn_v_rarely_ocassionally*100,1)` of these respondents answered that sick and injured animals are documented as specific categories if found during patrols (Fig 2). -->

```         
```

```{r section 2A plot }
#| echo: false
#| message: false
#| warning: false
#| eval: true
#| fig-align: center
#| fig-height: 3.2
#| fig-cap: Figure S2. Distribution of protected area data manager responses regarding the encounter of dead and sick or injured wildlife in the protected area(s) where they work. Red numbers indicate the total number of responses per encountering frequency. The dashed area of the polygons represent the responses indicating that dead, sick, and injured wildlife found during ranger patrols are recorded (rows 1 – 3, respectively). Black numbers indicate the total number of responses reporting recording and non-recording of dead, sick, and injured wildlife found during patrols per encountering frequency.
#| fig-alt: The overall encountering frequency for sick and injured wildlife was requested in a unique question, therefore, rows two and three show the same total number of responses per encountering frequency.
#| 

library(ggplot2)
library(camcorder)
library(ggpattern)
library(RColorBrewer)

section_2 <-
  terrestrial_data %>% filter(local==F) %>% 
  select(dead_found,
           sick_injured_found,
           dead_wl_recorded,
           sick_wl_recorded,
           injured_wl_recorded)



dead_found_recorded<-
  section_2 %>%
  # dplyr::select(-survey) %>%
  dplyr::count(dead_found, dead_wl_recorded, name = "total_dead_found_recorded_group") %>% 
  tidyr::complete(dead_found, dead_wl_recorded ) %>% 
  tidyr::replace_na(replace = list(total_dead_found_recorded_group=0)) %>% 
  rbind(tibble(dead_found=c(rep("Always",2), rep("Never",2)),
               dead_wl_recorded=rep(c("No", "Yes"), 2),
               total_dead_found_recorded_group=rep(0, 4)))

sick_found_recorded<-
  section_2 %>%
  # dplyr::select(-survey) %>%
  dplyr::count(sick_injured_found, sick_wl_recorded, name = "total_sick_found_recorded_group") %>% 
  tidyr::complete(sick_injured_found, sick_wl_recorded ) %>% 
  tidyr::replace_na(replace = list(total_sick_found_recorded_group=0)) %>% 
  rbind(tibble(sick_injured_found=c(rep("Always",2), rep("Very frequently",2), rep("Never",2)),
               sick_wl_recorded=rep(c("No", "Yes"), 3),
               total_sick_found_recorded_group=rep(0, 6)))


injured_found_recorded<-
  section_2 %>%
  # dplyr::select(-survey) %>%
  dplyr::count(sick_injured_found, injured_wl_recorded, name = "total_injured_found_recorded_group") %>% 
  tidyr::complete(sick_injured_found, injured_wl_recorded ) %>% 
  tidyr::replace_na(replace = list(total_injured_found_recorded_group=0)) %>% 
  rbind(tibble(sick_injured_found=c(rep("Always",2), rep("Very frequently",2), rep("Never",2)),
               injured_wl_recorded=rep(c("No", "Yes"), 3),
               total_injured_found_recorded_group=rep(0, 6)))





freq_found_recorded<-full_join(
                      dead_found_recorded, 
                      sick_found_recorded, 
                      by = c("dead_found" = "sick_injured_found",
                             "dead_wl_recorded" = "sick_wl_recorded")) 

freq_found_recorded<-
  full_join(
  freq_found_recorded, 
  injured_found_recorded, 
  by = c("dead_found" = "sick_injured_found",
         "dead_wl_recorded" = "injured_wl_recorded")) %>% 
  rename(found = dead_found) %>% 
  rename(recorded=dead_wl_recorded) %>% 
  rename(dead=total_dead_found_recorded_group) %>% 
  rename(sick=total_sick_found_recorded_group) %>%
  rename(injured=total_injured_found_recorded_group) %>% 
  mutate(found=factor(found,
                           levels = rev(c("Always",
                                          "Very frequently",
                                          "Occasionally",
                                          "Sometimes",
                                          "Rarely",
                                          "Very rarely",
                                          "Never")),
                           labels = rev(c("Always",
                                          "Very\nfrequently",
                                          "Occasionally",
                                          "Sometimes",
                                          "Rarely",
                                          "Very\nrarely",
                                          "Never"))))


freq_found_recorded<-
  freq_found_recorded %>%  
  pivot_longer(cols=c("dead", "sick", "injured")) %>% 
  arrange(found) %>% 
  mutate(name=factor(name, 
                     levels = c("injured", "sick", "dead"),
                     labels = c("Injured wildlife*",
                                "Sick wildlife*",
                                "Dead wildlife")))




#labels all dead per freq encountering 

labels<-
freq_found_recorded %>% 
  group_by(found, name) %>% 
  mutate(label=sum(value)) %>% 
  ungroup() %>%  
  distinct(found, name, label) %>% 
  pull(label)



# plot
labels_totals<-labels
labels_totals[labels_totals==0]<-NA

plot_section_2A<-
  
  ggplot(data = freq_found_recorded) +
  
  likert_theme +
  
  theme(text = element_text(size = 10.5),
        plot.title = element_text(size = 10, hjust = 0.5, vjust = 3.5, face = "plain",
                                  margin = margin(1, 2, 1, 1)),
        plot.margin = unit(c(0.3,0,0.1,.4), "cm"),
        plot.background = element_rect(linewidth = 1, color = "black")) +
  
  geom_col(aes(name, value, fill = found), width = 0.3) +
  
  geom_col_pattern(aes(name,
                       value,
                       fill = found), color="black", linewidth=0,
                   pattern = dplyr::if_else(freq_found_recorded$recorded=="Yes", "crosshatch", "none"),
                   pattern_density = 0.01,
                   pattern_angle = 90,
                   pattern_size=0.2,
                   pattern_color="grey25") +
  
  geom_label(
    aes(x = rep(c(3,2,1), 14) -0.37,
        y = c(rbind(labels_totals/2, rep(NA, 21))),
        label = c(rbind(labels_totals, rep(NA, 21))),
        colour="red"), # add percentage
    fontface = "bold",
    size=2.6,
    label.padding = unit(0.1, "lines")) +

geom_label(aes(x = c(rep(c(3,2,1), 10), 3,2.08,1,3,1.93,1, 3.08,2, 1.08, 2.93,2, 0.93),
               y = c(1, 2.5, 2.5, 4.5, 6.5, 6.5, # Never
                     1, 7.5, 6.5, 1, 2, 2, #Very rarely
                     0.5, 1.5, 0.5, 2.5, 3.5, 2, #rarely
                     NA, 0.5, 0.5, 2, 2, 2, #sometimes
                     NA, 0.5, NA, 0.5, 1.5, 1, #occasionally
                     NA, NA, NA, 1, NA, NA, # very frequently
                     rep(NA,6)
                     ),
               label = replace(value, list = c(value==0), values = NA)),
           #fill = "white",
           size = 2,
           label.padding = unit(0.1, "lines")) +

#scale_fill_brewer(type = "seq", palette = "GnBu") +
scale_fill_manual(values = brewer.pal(n = 9, name = "GnBu")[2:8]) +
  facet_wrap(.~found, nrow = 1) +
  coord_flip() +
  ggtitle("Overall encountering frecuency in protected area(s)") +
  labs(caption = "* The overall encountering frequency for sick and injured wildlife was requested in a unique question,\ntherefore, rows two and three show the same total number of responses per encountering frequency.") +
  theme(plot.caption = element_text(hjust=0))

# gg_resize_film(
#   height = 2.2/2*3,
#   width = 6.4,
#   units = "in",
#   dpi = 300
# )

plot_section_2A 

# ggsave("../Appendix/plot_section_2A.png",
#        plot = plot_section_2A,
#       height = 2.2/2*3,
#       width = 6.4,
#        units = "in",
#        dpi = 600)


# plot_section_2
#knitr::include_graphics("plots/plot_section_2A_option2.png")

```

```         

```

```{r documentation versus agreement with wildife health }
#| echo: false
#| message: false
#| warning: false
#| eval: true

dead_found_and_not_documented_versus_wh_importance<-
terrestrial_data %>% filter(local==F) %>% 
  select(dead_found, dead_wl_recorded, wildlife_health_important) %>% 
  filter(dead_wl_recorded=="No" & dead_found!="Never") %>% 
  count(wildlife_health_important)

dead_found_and_not_documented_wh_important_agree_strongly_agree<-
dead_found_and_not_documented_versus_wh_importance %>% 
  pull(n) %>% 
  sum()


number_responses_sick_injured_found_and_sick_not_documented_and_wh_importance_agree_strongly_agree<-
terrestrial_data %>% filter(local==F) %>% 
  select(sick_injured_found, sick_wl_recorded, wildlife_health_important) %>% 
  filter(sick_wl_recorded=="No" & sick_injured_found!="Never") %>% 
  count(wildlife_health_important) %>% 
  filter(wildlife_health_important%in%c("Strongly agree", "Agree")) %>% 
  pull(n) %>% sum()


number_responses_sick_injured_found_and_injured_not_documented_and_wh_importance_agree_strongly_agree<-
terrestrial_data %>% filter(local==F) %>% 
  select(sick_injured_found, injured_wl_recorded, wildlife_health_important) %>% 
  filter(injured_wl_recorded=="No" & sick_injured_found!="Never") %>% 
  count(wildlife_health_important) %>% 
  filter(wildlife_health_important%in%c("Strongly agree", "Agree")) %>% 
  pull(n) %>% sum()

sick_injured_found_and_sick_not_documented<-
terrestrial_data %>% filter(local==F) %>% 
  select(sick_injured_found, sick_wl_recorded, wildlife_health_important) %>% 
  filter(sick_wl_recorded=="No" & sick_injured_found!="Never") %>% 
  nrow()

sick_injured_found_and_injured_not_documented<-
terrestrial_data %>% filter(local==F) %>% 
  select(sick_injured_found, injured_wl_recorded, wildlife_health_important) %>% 
  filter(injured_wl_recorded=="No" & sick_injured_found!="Never") %>% 
  nrow()

```

<!-- All `r dead_found_and_not_documented_wh_important_agree_strongly_agree` respondents that ranked the encountering with dead wildlife at least "Very rarely" but answered that these animals were not documented if found during patrols (`r round(dead_found_and_not_documented_wh_important_agree_strongly_agree/nrow(terrestrial_data[terrestrial_data$local==F,])*100,1)`%) either agreed or strongly agreed with the statement on the importance of wildlife health to achieve conservation goals. Similarly, respondents that ranked the encountering with sick or injured wildlife at least "Very rarely" but answered that these animals were not documented if found during patrols tend to either agreed or strongly agreed with this statement (`r round(number_responses_sick_injured_found_and_sick_not_documented_and_wh_importance_agree_strongly_agree/sick_injured_found_and_sick_not_documented*100,1)` for sick wildlife and `r round(number_responses_sick_injured_found_and_injured_not_documented_and_wh_importance_agree_strongly_agree/sick_injured_found_and_injured_not_documented*100,1)` for injured wildlife). -->

```{r}
#| echo: false
#| message: false
#| warning: false
#| eval: true

recording_of_sick_injured_or_dead_wildlife<-
  terrestrial_data %>%
  filter(local==T) %>% 
  select(
           # how_healthy_wl_recorded, 
           # healthy_wl_recorded,
           how_sick_wl_recorded,
           sick_wl_recorded,
           how_injured_wl_recorded,
           injured_wl_recorded,
           how_dead_wl_recorded,
           dead_wl_recorded) %>% 
  filter(#healthy_wl_recorded=="Yes" |
           sick_wl_recorded =="Yes" |
           injured_wl_recorded == "Yes" |
           dead_wl_recorded == "Yes") %>% 
  select(-sick_wl_recorded, 
         -injured_wl_recorded,
         -dead_wl_recorded)
```

<!-- The recording method reported to document either sick, injured, or dead wildlife when found during a patrol varied (considering the `r recording_of_sick_injured_or_dead_wildlife |> nrow()` responses reporting the documentation of either dead, sick, or injured wildlife). Most often, each animal was documented individually across health status. Another frequent reporting method was via a full inventory of healthy, sick, injured, or dead animals for each species involved. Sometimes, sick, injured, or dead wildlife were recorded as present/absent or in some other fashion. The full distribution of the recording methods across healthy, sick, injured, or dead wildlife is shown in Fig 3. -->

```         

```

```{r section 2D plot}
#| echo: false
#| message: false
#| warning: false
#| eval: true
#| fig-height: 3
#| fig-cap: Figure S3. Distribution of methods of documentation to register either sick, injured, or dead wildlife found during ranger patrols reported by protected area data managers.

healthy<-
  terrestrial_data %>% filter(local==F) %>% 
  select(how_healthy_wl_recorded, healthy_wl_recorded) %>%
  filter(healthy_wl_recorded=="Yes") %>%
  count(how_healthy_wl_recorded) %>%
  arrange(-n) %>% 
  rename("How_recorded"="how_healthy_wl_recorded")

healthy$How_recorded<-c("Part of the full count",
                                         "Individual observation",
                                         "Present or absent",
                                         "Another way")

healthy$status<-"healthy"

injured<-
  terrestrial_data %>% filter(local==F) %>% 
  select(how_injured_wl_recorded, injured_wl_recorded) %>%
  filter(injured_wl_recorded=="Yes") %>%
  count(how_injured_wl_recorded) %>%
  arrange(-n) %>% 
  rename("How_recorded"="how_injured_wl_recorded")

injured$How_recorded<- c("Individual observation",
                          "Present or absent")

injured$status<-"injured"

sick<-
  terrestrial_data %>% filter(local==F) %>% 
  select(how_sick_wl_recorded, sick_wl_recorded) %>%
  filter(sick_wl_recorded=="Yes") %>%
  count(how_sick_wl_recorded) %>%
  arrange(-n) %>% 
  rename("How_recorded"="how_sick_wl_recorded")


sick$How_recorded <- c("Individual observation",
                                         "Part of the full count",
                                         "Present or absent")

sick$status<-"sick"

dead<- 
  terrestrial_data %>% filter(local==F) %>% 
  select(how_dead_wl_recorded, dead_wl_recorded) %>%
  filter(dead_wl_recorded=="Yes") %>%
  count(how_dead_wl_recorded) %>%
  arrange(-n) %>% 
  rename("How_recorded"="how_dead_wl_recorded")

dead$How_recorded <- c("Individual observation",
                              "Another way")

dead$status<-"dead"

# create data frame

# temp <- data.frame("How_recorded" = how,
#                    "Responses_healthy" = healthy$n,
#                    "Responses_sick" = sick$n,
#                    "Responses_injured" = injured$n,
#                    "Responses_dead" = dead$n)

# convert to long format
# temp_long <- pivot_longer(temp, cols = 2:5, 
#                           names_to = "variable", 
#                           values_to = "value")
temp_long<-rbind(healthy, sick, injured, dead)

temp_long<-temp_long %>% complete(How_recorded, status) %>% 
  replace_na(replace = list(n=0))


# create plot
how_wildlife_health_recorded<-
  ggplot(temp_long, aes(x = status, y = How_recorded, size = n, fill = status)) +
  geom_point(shape = 22, stroke=0.2) +
  geom_label(aes(
    x = status, 
    y = How_recorded,
    label = n), 
             fill="white",
             colour="black",
             fontface = "bold",
             size=2.6, 
             label.padding = unit(0.1, "lines")) +
  scale_size(range = c(2, 30), name = "Response count") +
  scale_y_discrete(name = "",
                   labels = c("Recorded in\nanother way",
                              "Each animal is an\nindividual\nobservation",
                              
                              "Part of\nthe full count\nof the corresponding\nspecies",
                              "Present/absent"
                   )) +
  
  scale_x_discrete(limits = c("healthy",
                              "sick",
                              "injured",
                              "dead"),
                   position = "top",
                   name = "",
                   labels = c("Healthy\nwildlife",
                              "Sick\nwildlife",
                              "Injured\nwildlife",
                              "Dead\nwildlife")) +
  
  theme(
    plot.title = element_text(size = 10, hjust = 0.5, vjust = 2.5, face = "plain",
                              margin = margin(1, 2, 1, 1)),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_blank(),
    panel.background = element_blank(),
    strip.background  = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    axis.text.x = element_text(size=8, colour = "black"),
    axis.text.y = element_text(size =8, hjust = 0, colour = "black"),
    axis.ticks.x = element_blank(),
    axis.ticks.y = element_blank(),
    plot.background = element_rect(linewidth = 1, color = "black")
  ) +
  scale_fill_brewer(type = "div", palette = "Spectral") +
  guides(size = "none", fill = "none")#+
  #ggtitle("Type of wildlife")




# gg_record(
#   dir = file.path(tempdir(), "recording100"), # where to save the recording
#   device = "png", # device to use to save images
#   width = 5,      # width of saved image
#   height = 3.6,     # height of saved image
#   units = "in",   # units for width and height
#   dpi = 300       # dpi to use when saving image
# )

how_wildlife_health_recorded

# gg_resize_film(
#   height = 3.7,
#   width = 5,
#   units = "in",
#   dpi = 300
# )


# ggsave("../Appendix/plot_section_2D.png",
#        plot = how_wildlife_health_recorded,
#        height = 3.7,
#        width = 5,
#        units = "in",
#        dpi = 600)



# plot_section_2
#knitr::include_graphics("plots/plot_section_2D.png")
```

<!-- The proportion of responses indicating the use of Photographs and the documentation of: Species, Photographs, Suspected Cause, Sex, Condition, Age, Anomalies, and Other in the subset of responses reporting the documentation of sick, injured, or dead wildlife if found during patrols is shown in Fig 4. None of the  items are collected consistently to document animals with a specific health status and the variability of item recording remained similar across health categories (e.g., photographs and species are the main items reported across health status). -->

```         

```

```{r data items collected}
#| echo: false
#| message: false
#| warning: false
#| eval: true
#| fig-align: center
#| fig-width: 3.8
#| fig-height: 7.4
#| fig-cap: Figure S4. The percentage of protected area data manager responses indicating the
#|   documentation of sick, injured, and dead wildlife found during patrols 
#|   that record specific data items for each wildlife health status. The size 
#|   of the circles is proportional to the percentages observed.


#source("plot_section_2.R")

# plot_section_2
# knitr::include_graphics("plots/plot_section_2E.png")

data_from_dead_wl<-
terrestrial_data %>%
  filter(local==F) %>% 
  select(#survey, 
           dead_wl_recorded,
           dead_wl_data_recorded) %>% 
  filter(dead_wl_recorded=="Yes") %>% 
  tidyr::separate_longer_delim(dead_wl_data_recorded, ", ") %>% 
  dplyr::count(dead_wl_data_recorded, name = "dead") %>% 
  rename("items"="dead_wl_data_recorded")

data_from_dead_wl$items[data_from_dead_wl$items=="Anomalies in carcass (if any)"]<-"Anomalies"
data_from_dead_wl$items[data_from_dead_wl$items=="Carcass condition"]<-"Condition"
data_from_dead_wl$items[data_from_dead_wl$items=="Suspect cause of death"]<-"Suspect Cause"


data_from_sick_wl<-
  terrestrial_data %>%
  filter(local==F) %>% 
  select(#survey, 
           sick_wl_recorded,
           sick_wl_data_recorded) %>% 
  filter(sick_wl_recorded=="Yes") %>% 
  tidyr::separate_longer_delim(sick_wl_data_recorded, ", ") %>% 
  dplyr::count(sick_wl_data_recorded, name = "sick") %>% 
  rename("items"="sick_wl_data_recorded")

data_from_sick_wl$items[data_from_sick_wl$items=="Anomalies/signs if any"]<-"Anomalies"
data_from_sick_wl$items[data_from_sick_wl$items=="Body condition"]<-"Condition"
data_from_sick_wl$items[data_from_sick_wl$items=="Suspect cause of disease"]<-"Suspect Cause"




data_from_inj_wl<-
  terrestrial_data %>%
  filter(local==F) %>% 
  select(#survey, 
           injured_wl_recorded,
           injured_wl_data_recorded) %>% 
  filter(injured_wl_recorded=="Yes") %>% 
  tidyr::separate_longer_delim(injured_wl_data_recorded, ", ") %>% 
  dplyr::count(injured_wl_data_recorded, name = "injured") %>% 
  rename("items"="injured_wl_data_recorded")

data_from_inj_wl$items[data_from_inj_wl$items=="Anomalies/signs if any"]<-"Anomalies"
data_from_inj_wl$items[data_from_inj_wl$items=="Body condition"]<-"Condition"
data_from_inj_wl$items[data_from_inj_wl$items=="Suspect cause of injury"]<-"Suspect Cause"



what_is_collected<-
dplyr::full_join(data_from_dead_wl, 
                 data_from_sick_wl) %>% 
                 dplyr::full_join(data_from_inj_wl) %>% 
  tidyr::replace_na(list(sick = 0, injured = 0, dead=0)) %>% 
  mutate(dead=dead/terrestrial_data %>% 
           filter(local==F) %>% 
           # distinct(survey, 
           #          dead_wl_recorded) %>% 
           filter(dead_wl_recorded=="Yes") %>% nrow() *100) %>%
  mutate(sick=sick/terrestrial_data %>%
           filter(local==F) %>% 
           # distinct(survey, 
           #          sick_wl_recorded) %>% 
           filter(sick_wl_recorded=="Yes") %>% nrow *100) %>%
  mutate(injured=injured/terrestrial_data %>%
           filter(local==F) %>% 
           # distinct(survey, 
           #          injured_wl_recorded) %>% 
           filter(injured_wl_recorded=="Yes") %>% nrow *100)


# convert to long format
temp_long <- pivot_longer(what_is_collected, cols = 2:4, names_to = "class", values_to = "percentage")


# create plot
temp_long$class <- as.factor(temp_long$class)


what_is_recorded=
  ggplot(temp_long, aes(x = class, y = items, size = percentage, fill = class)) +
  geom_point(shape = 21, stroke=0.2) +
  geom_label(aes(label = round(percentage,1)), 
             size = 2.6, 
             fontface = "bold",
             # vjust = 0.4, 
             fill="white", 
             label.padding = unit(0.1, "lines")) +
  scale_size(range = c(5, 28), name = "Response count") +
  scale_y_discrete(name = "") + #,
  #                  labels = c("Recorded in\nanother way",
  #                             "Each animal is an\nindividual\nobservation",
  #                             
  #                             "Part of\nthe full count\nof the corresponding\nspecies",
  #                             "Present/absent"
  #                  )) +
  
  scale_x_discrete(limits = c("sick",
                              "injured",
                              "dead"),
                   position = "top",
                   name = "",
                   labels = c(
                              "Sick\nwildlife",
                              "Injured\nwildlife",
                              "Dead\nwildlife")) +
  
  theme(
    panel.grid.minor = element_blank(),
    panel.grid.major = element_blank(),
    panel.background = element_blank(),
    strip.background  = element_blank(),  
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    axis.text.x = element_text(size=8, colour = "black"),
    axis.text.y = element_text(size =8, colour = "black"),
    axis.ticks.x = element_blank(),
    axis.ticks.y = element_blank(),
    plot.background = element_rect(linewidth = 1, color = "black")
  ) +
  scale_fill_manual(values = c("#D7191C", "#ABDDA4", "#3288BD")) +
  guides(size = "none", fill = "none")


# library(scales)
# show_col(brewer.pal(11,"Spectral"))

# gg_resize_film(
#   height = 3.6*2,
#   width = 5/5*4,
#   units = "in",
#   dpi = 300
# )

what_is_recorded

# ggsave("../Appendix/plot_section_2E.png",
#        plot = what_is_recorded,
#        height = 3.6*2,
#        width = 5/5*4,
#        units = "in",
#        dpi = 600)

```

```         
```

### Presence of domestic animals in protected areas, the documentation of their health status, and the perceived threats of domestic animals to conservation goals

```         
```

```{r domestic animals and recording}
#| echo: false
#| message: false
#| warning: false
#| eval: true

num_responses_dom_animals_in_pa<-
terrestrial_data |> 
  filter(local==F) |>
  select(  dom_animals_in_pa, 
           dom_animals_recorded) |>
  filter(dom_animals_in_pa=="Yes") |> 
  nrow()

#responses where the dome animalas are observed and recorded
num_responses_dom_animals_in_pa_are_recorded<-
  terrestrial_data |> 
  filter(local==F) |>
  select(  dom_animals_in_pa, 
           dom_animals_recorded) |>
  filter(dom_animals_in_pa=="Yes") |>
  count(dom_animals_in_pa, dom_animals_recorded) %>% 
  filter(dom_animals_recorded=="Yes") |>
  pull(n)
  
num_responses_dom_animals_in_pa_are_recorded_health_status<-
terrestrial_data %>% 
  filter(local==F) |>
  select(  dom_animals_in_pa, 
           dom_animals_recorded, 
           dom_animal_health_status_recorded) |> 
  filter(dom_animals_in_pa=="Yes" &
           dom_animals_recorded=="Yes") %>% 
  count(dom_animal_health_status_recorded) %>% 
  filter(dom_animal_health_status_recorded=="Yes") %>% 
  pull(n)

#responses where the dome animals are observed, recorded, and the health status is registered.

num_responses_dom_animals_in_pa_are_concern_strongly_agree_agree<-
  terrestrial_data %>% 
  filter(local==F) |>
  select(dom_animals_concern,
         dom_animals_in_pa, 
         dom_animals_recorded, 
         dom_animal_health_status_recorded) %>% 
  filter(dom_animals_in_pa=="Yes") %>% 
  filter(dom_animals_concern%in% c("Strongly agree", "Agree")) %>% 
  nrow()



num_responses_dom_animals_in_pa_are_concern_strongly_agree_agree_recorded<-
  terrestrial_data %>% 
  filter(local==F) |>
  select(dom_animals_concern,
         dom_animals_in_pa, 
         dom_animals_recorded, 
         dom_animal_health_status_recorded) %>% 
  filter(dom_animals_in_pa=="Yes") %>% 
  filter(dom_animals_concern%in% c("Strongly agree", "Agree")) %>% 
  filter(dom_animals_recorded=="Yes") %>% 
  nrow()

```

```{r plot appendix section 3}
#| echo: false
#| message: false
#| warning: false
#| eval: true
#| fig-height: 1.8
#| fig-cap:
#|  Figure S5. Distribution of the level of agreement among protected area data managers with the statement 'introduced domestic animals (e.g., dogs, cats, cattle, pigs, cats) are a concern for the conservation goals of the protected areas where I work'. Red numbers indicate the total number of responses per agreement. The dashed area of the polygons represent the responses indicating that domestic animals found during ranger patrols are recorded. Black numbers indicate the total number of responses reporting documentation and non-documentation of domestic animals found during patrols.

library(ggpattern)
library(ggrepel)

dom_animals<-
  terrestrial_data %>%
  filter(local==F) %>% 
  select(
           dom_animals_concern,
           dom_animals_in_pa,
           dom_animals_recorded,
           dom_animal_health_status_recorded) %>% 
  filter(dom_animals_in_pa=="Yes") %>% 
  select(-dom_animals_in_pa) %>% 
  dplyr::count(dom_animals_concern, 
               dom_animals_recorded) %>% 
  # tidyr::pivot_wider(names_from = dom_animal_health_status_recorded, 
  #                    names_prefix = "health_status_recorded_",
  #                    values_from = n, 
  #                    values_fill = 0) %>%
  tibble::add_row(dom_animals_concern = c(rep("Strongly Disagree", 2),
                                          rep("Somewhat Disagree", 2),
                                          rep("Neutral", 2)),
                  dom_animals_recorded = rep(c("Yes", "No"), 3),
                  n = rep(0,6)) %>% 
  #                 dom_animals_concern = rep("Strongly Disagree", 2),
  #                #dom_animals_recorded = c("No","Yes")#,
  #                # health_status_recorded_No=c(0,0),
  #                # health_status_recorded_Yes=c(0,0)
  #                ) %>% 
  tidyr::complete(dom_animals_concern, 
                  dom_animals_recorded) %>% 
  
  tidyr::replace_na(list(n=0)) #%>% 

#dom_animals

# tidyr::replace_na(list(health_status_recorded_No=0,
  #                        health_status_recorded_Yes=0)) %>% 
  #rowwise(dom_animals_concern, dom_animals_recorded) %>% 
  # mutate(dom_animals_recorded_total=sum(c(health_status_recorded_No,
  #                                         health_status_recorded_Yes))) %>% 
  #mutate(health_status_recorded_Yes_perc=health_status_recorded_Yes/
                                         #dom_animals_recorded_total*100) %>% 
  # select(dom_animals_concern,
  #        dom_animals_recorded, 
  #        dom_animals_recorded_total,
  #        health_status_recorded_No,
  #        health_status_recorded_Yes,
  #        health_status_recorded_Yes_perc)



section_3<-dom_animals  %>% 
  mutate(dom_animals_concern=factor(dom_animals_concern,
                                    levels = rev(c("Strongly agree",
                                              "Agree",
                                              "Neutral",
                                              "Somewhat Disagree",
                                              "Disagree",
                                              "Strongly Disagree")),
                                    labels = rev(c("Strongly\nagree",
                                                "Agree",
                                                "Neutral",
                                                "Somewhat\ndisagree",
                                                "Disagree",
                                                "Strongly\ndisagree"))))


#labels all dead per freq encountering 

labels<-
  section_3 %>% 
  group_by(dom_animals_concern) %>%
  mutate(num = sum(n)) %>%
  distinct(dom_animals_concern, num) %>% 
  ungroup() %>% 
  pull(num)


position.y<-c(rbind(labels/2, rep(NA, 6)))
position.y[c(5,7,11)]<-NA



plot_section_3<-
  ggplot(data = section_3) +
  
  likert_theme +
  
  theme(text = element_text(size = 10.5),
        plot.title = element_text(size = 10, hjust = 0.5, vjust = 3.5, face = "plain",
                                  margin = margin(1, 2, 1, 1)),
        plot.margin = unit(c(0.3,0,0.1,.4), "cm"),
        plot.background = element_rect(linewidth = 1, color = "black")) +
  
  geom_col(aes("Introduced domestic\nanimals are\na conservation\nconcern", 
               n, 
               fill = dom_animals_concern), width = 0.3) +
  
  geom_col_pattern(aes(1, 
                       n, 
                       fill = dom_animals_concern), color="black", linewidth=0, 
                   pattern = dplyr::if_else(section_3$dom_animals_recorded=="Yes", "crosshatch", "none"),
                   pattern_density = 0.01, 
                   pattern_angle = 90,
                   pattern_size=0.2, 
                   pattern_color="grey25") +

  geom_label(
    aes(x = rep(1, 12) -0.37, 
        y = position.y,
        label = c(rbind(labels, rep(NA, 6))),
        colour="red"), # add percentage
    fontface = "bold",
    size=2.6, 
    label.padding = unit(0.1, "lines")) +
  
  
  geom_label(aes(x = c(rep(1, 2), 0.93, 1.08, rep(1,2), 0.93, 1.08, rep(1, 4)),    
                 y = c(1.5, 2.5, #agree
                       0.5, 0.5, 
                       1, 0.5, 
                       0.5, 0.5, 
                       0.5, 1.5, #strongly agree
                       0.5, 0.5),
                 label = replace(n, 
                                 list = c(n==0), 
                                 value = NA)),
             #fill = "white",
             size = 2,
             label.padding = unit(0.1, "lines")) +
  
  
  #scale_fill_brewer(type = "div") +  
  scale_fill_manual(values = brewer.pal(n = 9, name = "GnBu")[2:8]) +
  facet_wrap(.~dom_animals_concern, nrow = 1) +
  coord_flip() +
  ggtitle("Overall agreement domestic animals are conservation concern")

plot_section_3

```

```         
```

### Health data storage practices in protected areas

```         
```

```{r plot health data storage practices}
#| echo: false
#| message: false
#| warning: false
#| eval: true
#| fig-align: center
#| fig-height: 3.6
#| fig-width: 4.2
#| fig-cap:
#|  Figure S6. Distribution of protected area data managers reporting the documentation of either sick, injured, or dead wildlife found during ranger patrols across data storage practices with respect to the use of SMART.

data_smart_dead<-
  terrestrial_data |> 
  filter(local==F) %>% 
  select(  dead_wl_recorded,
           dead_wl_data_in_smart) |>
  # select(-survey) |>
  filter(dead_wl_recorded=="Yes") |>
  count(dead_wl_recorded, dead_wl_data_in_smart, name = "count_for_dead_wl") |>
  select(-dead_wl_recorded) %>% 
  rename("data_in_smart"="dead_wl_data_in_smart") |>
  mutate(percentage=round(count_for_dead_wl/sum(count_for_dead_wl)*100,2)) |>
  mutate(class="dead") |>
  mutate(count=count_for_dead_wl)


data_smart_sick<-
  terrestrial_data |> 
  filter(local==F) %>% 
  select(#survey,
    sick_wl_recorded,
    sick_wl_data_in_smart) |>
  # select(-survey) |>
  filter(sick_wl_recorded=="Yes") |>
  count(sick_wl_recorded, sick_wl_data_in_smart, name = "count_for_sick_wl") |>
  select(-sick_wl_recorded)  |>
  rename("data_in_smart"="sick_wl_data_in_smart") |>
  mutate(percentage=round(count_for_sick_wl/sum(count_for_sick_wl)*100,2))|>
  mutate(class="sick") |>
  mutate(count=count_for_sick_wl)


data_smart_injured<-
  terrestrial_data |> 
  filter(local==F) %>% 
  select(#survey, 
    injured_wl_recorded,
    injured_wl_data_in_smart) |>
  #select(-survey) |>
  filter(injured_wl_recorded=="Yes") |>
  count(injured_wl_recorded, injured_wl_data_in_smart, name = "count_for_injured_wl") |>
  select(-injured_wl_recorded) %>% 
  rename("data_in_smart"="injured_wl_data_in_smart") |>
  mutate(percentage=round(count_for_injured_wl/sum(count_for_injured_wl)*100,2)) |>
  mutate(class="injured") |>
  mutate(count=count_for_injured_wl)
# select(count_for_injured_wl)


temp_long<-
  bind_rows(data_smart_sick, 
            data_smart_injured,
            data_smart_dead)

temp_long$data_in_smart<-factor(temp_long$data_in_smart, 
                                levels = c("All of these items are entered and stored in the corresponding SMART Conservation Area", 
                                           "Some of these items are entered and stored in the corresponding SMART Conservation Area",
                                           "None of these items are entered in the corresponding SMART Conservation Area"))

# create plot
wildlife_health_in_smart<-
  ggplot(temp_long, aes(x = class, y = data_in_smart, size = c(count), fill = class)) +
  geom_point(shape = 22, stroke=0.2) +
  geom_label(aes(label = count),             
             size = 2.6, 
             fontface = "bold",
             #vjust = 0.4, 
             fill="white",
             label.padding = unit(0.1, "lines")) +
  scale_size(range = c(6, 24), name = "Response count") +
  scale_y_discrete(name = "",
                   labels = c("All of these items are\nstored in a SMART\ndatabase",
                              "Some of these items are\nentered in a SMART\ndatabase",
                              "None of these items are\nentered in a SMART\ndatabase")) +
  
  scale_x_discrete(limits = c("sick",
                              "injured",
                              "dead"),
                   position = "top",
                   name = "",
                   labels = c("Sick\nwildlife",
                              "Injured\nwildlife",
                              "Dead\nwildlife")) +
  
  theme(
    panel.grid.minor = element_blank(),
    panel.grid.major = element_blank(),
    panel.background = element_blank(),
    strip.background  = element_blank(), 
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    axis.text.x = element_text(size=8, colour = "black"),
    axis.text.y = element_text(size =8, colour = "black"),
    axis.ticks.x = element_blank(),
    axis.ticks.y = element_blank(),
    plot.background = element_rect(linewidth = 1, color = "black")
  ) +
  scale_fill_manual(values = c("#D7191C", "#ABDDA4", "#3288BD")) +
  guides(size = "none", fill = "none")

wildlife_health_in_smart



```

```         
```

### Current state of SMART deployment in protected areas

```{r section 5}
#| echo: false
#| message: false
#| warning: false
#| eval: true

smart_use<-
  terrestrial_data |>
  filter(local==F) %>% 
  # select(#survey, 
  #          # sick_wl_data_in_smart,
  #          # injured_wl_data_in_smart,
  #          # dead_wl_data_in_smart,
  #          protected_area,
  #          # country,
  #          smart_fully_rolled_out,
  #          smart_version,
  #          smart_connect, 
  #          set_up_connect) |>
  select(protected_area,
         # country,
         smart_fully_rolled_out,
         smart_version,
         smart_connect,
         set_up_connect)

# smart_use$smart_version

seven<-c(2,4,7, 10, 11)
six<-c(1,5,6,8,13)
five<-c(3)
unknown<-c(9,12)


# all(
# tibble(
#   seven=if_else(1:nrow(smart_use)%in%seven, 1, 0),
#   six=if_else(1:nrow(smart_use)%in%six, 1, 0),
#   five=if_else(1:nrow(smart_use)%in%five, 1, 0),
#   four=if_else(1:nrow(smart_use)%in%four, 1, 0),
#   unknown=if_else(1:nrow(smart_use)%in%unknown, 1, 0)) %>%
#   rowSums() ==1 )

smart_use$smart_version[seven]<-7
smart_use$smart_version[six]<-6
smart_use$smart_version[five]<-5
smart_use$smart_version[unknown]<-"unknown"



smart_use_for_text<-
smart_use |>
  count(smart_fully_rolled_out)


smart_version_for_text<-
  smart_use |>
  count(smart_version)


smart_connect_for_text<-
  smart_use |>
  count(smart_connect)

smart_connect_set_up_for_text<-
  smart_use |>
  filter(smart_connect=="No" & grepl(pattern="Yes", x= 
                                       smart_use$set_up_connect, 
                                     ignore.case=T)) |> nrow()

```

`r as.character(english::as.english(smart_use_for_text |> pull(n) |> nth(1))) |> stringr::str_to_sentence()` protected area data managers reported that SMART was fully rolled-out, and `r smart_use_for_text |> pull(n) |> nth(2)` partially rolled-out. The most common SMART Desktop version by the time of the survey was SMART `r smart_version_for_text |> arrange(-n) |>  pull(smart_version) |> nth(1)`, reported by `r smart_version_for_text |> arrange(-n) |>  pull(n) |> nth(1)` data managers. SMART 7 was already available for `r smart_version_for_text |> filter(smart_version%in% c("7")) |> pull(n)` data managers by the time of the survey. Older SMART versions were reported once. Finally, `r smart_connect_for_text |> filter(smart_connect=="Yes") |> pull(n) |> nth(1)` data managers reported SMART Connect availability and `r smart_connect_set_up_for_text` mentioned plans to set it up.

<!-- ## Comparing the results of non-local and local responses from the same country -->

<!-- ### Perceptions regarding wildlife health importance in conservation and potential consequences of pathogen transmission among wildlife, domestic animals, and people in local surveys and non-local surveys containing protected areas in local responses -->

<!-- ```{r compare global local section 1} -->

<!-- #| echo: false -->

<!-- #| message: false -->

<!-- #| warning: false -->

<!-- #| eval: true -->

<!-- #| layout-ncol: 1 -->

<!-- #| layout-nrow: 4 -->

<!-- #| results: asis -->

<!-- library(htmltools) -->

<!-- # terrestrial_data<-readRDS("data/terrestrial_data.RDS") -->

<!-- #  -->

<!-- # terrestrial_data<-terrestrial_data %>% filter(position!="Other") -->

<!-- #  -->

<!-- # general<-terrestrial_data %>%  -->

<!-- #   filter(local==F) -->

<!-- #  -->

<!-- # #sort(unique(general$country)) -->

<!-- # #sort(unique(local$country)) -->

<!-- #  -->

<!-- # general<-general %>%  -->

<!-- #   unnest(protected_area) %>%  -->

<!-- #   select(protected_area, country) %>%  -->

<!-- #   mutate(protected_area=tolower(protected_area)) %>%  -->

<!-- #   nest(.by = "country") -->

<!-- #  -->

<!-- # general$data<-map(general$data, \(x) unique(x)) -->

<!-- #  -->

<!-- # general<-general %>%  rename("general_protected_areas"="data") -->

<!-- #  -->

<!-- # #general$general_protected_areas -->

<!-- #  -->

<!-- # local<-terrestrial_data %>%  -->

<!-- #   filter(local==T) -->

<!-- #  -->

<!-- # local<-local %>%  -->

<!-- #   unnest(protected_area) %>%  -->

<!-- #   select(protected_area, country) %>%  -->

<!-- #   mutate(protected_area_local=tolower(protected_area)) %>%  -->

<!-- #   select(country, protected_area_local)  -->

<!-- #    -->

<!-- #  -->

<!-- # general$local_protected_area<- -->

<!-- #   unname(map(general$country, \(x) local[local$country==x,]$protected_area_local)) -->

<!-- # kenya global does not contain kenya local -->

<!-- # general$general_protected_areas[[1]] -->

<!-- # general$local_protected_area[[1]] -->

<!-- #  -->

<!-- # # tanzania global does not contain tanzania local -->

<!-- # general$general_protected_areas[[2]] -->

<!-- # general$local_protected_area[[2]] -->

<!-- #  -->

<!-- # # Bhutan global does  contain all buthan local -->

<!-- # general$general_protected_areas[[3]] -->

<!-- # general$local_protected_area[[3]] -->

<!-- #  -->

<!-- # # no indonesia local -->

<!-- # general$general_protected_areas[[4]] -->

<!-- # general$local_protected_area[[4]] -->

<!-- #  -->

<!-- # # Republic of congo global does  contain all local -->

<!-- # general$general_protected_areas[[5]] -->

<!-- # general$local_protected_area[[5]] -->

<!-- #  -->

<!-- # # no côte d'ivoire local -->

<!-- # general$general_protected_areas[[6]] -->

<!-- # general$local_protected_area[[6]] -->

<!-- #  -->

<!-- # # madagascar global does  contain all local -->

<!-- # general$general_protected_areas[[7]] -->

<!-- # general$local_protected_area[[7]] -->

<!-- #  -->

<!-- # # malaysia global does not contain malaysia local -->

<!-- # general$general_protected_areas[[8]] -->

<!-- # general$local_protected_area[[8]] -->

<!-- #  -->

<!-- #  -->

<!-- # # peru global contain all local -->

<!-- # general$general_protected_areas[[9]] -->

<!-- # general$local_protected_area[[9]] -->

<!-- #  -->

<!-- # # no honduras local -->

<!-- # general$general_protected_areas[[10]] -->

<!-- # general$local_protected_area[[10]] -->

<!-- # Bhutan -->

<!-- # Republic of congo -->

<!-- # madagascar -->

<!-- # peru -->

<!-- source("section_2_1.R") -->

<!-- # for(i in seq_along(out)){ -->

<!-- #   for(y in seq_along(out[[i]])){ -->

<!-- #   return(out[[i]][[y]])  #response X -->

<!-- #   }} -->

<!-- # tagList(out[[1]]) -->

<!-- out[[1]] -->

<!-- out[[2]] -->

<!-- out[[3]] -->

<!-- out[[4]] -->

<!-- #unlist(out, use.names = F) -->

<!-- # knitr::knit(text = unlist(out, recursive = FALSE)) -->

<!-- # section_1_table1 -->

<!-- # section_1_table2 -->

<!-- # section_1_table3 -->

<!-- # section_1_table4 -->

<!-- ``` -->

<!-- ### Overall frequency of encounters with dead, sick, or injured wildlife in protected areas and their documentation when found during patrols in local surveys and non-local surveys containing protected areas in local responses -->

<!-- ```{r compare global local section 2} -->

<!-- #| echo: false -->

<!-- #| message: false -->

<!-- #| warning: false -->

<!-- #| eval: true -->

<!-- #| layout-ncol: 1 -->

<!-- #| layout-nrow: 4 -->

<!-- #| results: asis -->

<!-- source("section_2_2.R") -->

<!-- out[[1]] -->

<!-- out[[2]] -->

<!-- out2[[1]] -->

<!-- out2[[2]] -->

<!-- out2[[3]] -->

<!-- ``` -->

<!-- ### Presence of domestic animals in protected areas, the documentation of their health status, and the perceived threats of domestic animals to conservation goals in local surveys and non-local surveys containing protected areas in local responses -->

<!-- ```{r compare global local section 3} -->

<!-- #| echo: false -->

<!-- #| message: false -->

<!-- #| warning: false -->

<!-- #| eval: true -->

<!-- #| layout-ncol: 1 -->

<!-- #| layout-nrow: 4 -->

<!-- #| results: asis -->

<!-- source("section_2_3.R") -->

<!-- out[[1]] -->

<!-- out[[2]] -->

<!-- out[[3]] -->

<!-- out[[4]] -->

<!-- ``` -->

<!-- ### Health data storage practices in local surveys and non-local surveys containing protected areas in local responses -->

<!-- ```{r compare global local section 4} -->

<!-- #| echo: false -->

<!-- #| message: false -->

<!-- #| warning: false -->

<!-- #| eval: true -->

<!-- #| tbl-pos: H -->

<!-- #| layout-ncol: 1 -->

<!-- #| layout-nrow: 4 -->

<!-- #| results: asis -->

<!-- ##-- SECTION 4 -->

<!-- source("section_2_4.R") -->

<!-- dead_in_smart[[1]] -->

<!-- dead_in_smart[[2]] -->

<!-- dead_in_smart[[3]] -->

<!-- dead_in_smart[[4]] -->

<!-- sick_in_smart[[1]] -->

<!-- sick_in_smart[[2]] -->

<!-- sick_in_smart[[3]] -->

<!-- injured_in_smart[[1]] -->

<!-- injured_in_smart[[2]] -->

<!-- injured_in_smart[[3]] -->

<!-- ``` -->
