---
title: ""
# author:
#   - name: Diego Montecino-Latorre
#     affiliations:
#       - name: Wildlife Conservation Society - Health Program
#         city: Bronx
#         state: New York
#   - name: Mathieu Pruvot
#     affiliations:
#       - name: Wildlife Conservation Society - Health Program
#         city: Bronx
#         state: New York
#   - name: Sarah H Olson
#     affiliations:
#       - name: Wildlife Conservation Society - Health Program
#         city: Bronx
#         state: New York
number-sections: false
editor: visual
execute:
  cache: false
format:
  pdf:
    include-in-header: 
      text: |
        \usepackage{pdfpages}
---

<!-- ```{r load packages} -->

<!-- #| echo: false -->

<!-- #| eval: true -->

<!-- #| message: false -->

<!-- #| warning: false -->

<!-- knitr::opts_chunk$set(fig.pos = "H", out.extra = "") -->

<!-- source("R/load_packages.R") -->

<!-- ``` -->

```{r global options, warning=FALSE, echo=FALSE, message=FALSE}
knitr::opts_chunk$set(fig.pos = "H")
```
# Supporting Information ‘Wildlife health perceptions and monitoring practices in globally distributed protected areas’

# Methods 

### Appendix S1. Survey

```{=latex}
\includepdf[pages=-]{survey_google_form/survey_google_forms.pdf}
```

# Results

### Perceptions of wildlife health importance

```{r perceptions regarding wildlife health importance appendix}
#| echo: false
#| message: false
#| warning: false
#| eval: false


library(ggthemes)
library(grid)
library(patchwork)

section_1 =
  terrestrial_data  |>  filter(local==F) |> 
  select(#survey,
    wildlife_health_important,
    hum_liv_path_affect_wildlife,
    wildlife_path_affect_livestock,
    wildlife_path_affect_phealth)


section_1<-
  section_1 |>
  #dplyr::select(-survey) |>
  tidyr::pivot_longer(cols = everything()) |>
  dplyr::group_by(name, value, .drop=FALSE) |>
  dplyr::count(name,value) |>
  dplyr::rename(c("question"="name", "rank"="value", "num_responses"="n")) |>
  ungroup() |>
  complete(question,rank,fill=list(num_responses=0)) |>
  mutate(rank=factor(rank,
                     levels = rev(c("Strongly agree",
                                    "Agree",
                                    "Neutral",
                                    "Somewhat Disagree",
                                    "Disagree",
                                    "Strongly disagree")),
                     labels = rev(c("Strongly\nagree",
                                    "Agree",
                                    "Neutral",
                                    "Somewhat\ndisagree",
                                    "Disagree",
                                    "Strongly\ndisagree")))) |>
  mutate(question=factor(question,
                         levels = rev(c("wildlife_health_important",
                                        "hum_liv_path_affect_wildlife",
                                        "wildlife_path_affect_phealth",
                                        "wildlife_path_affect_livestock")),
                         labels = rev(c("Wildlife health\nis important",
                                        "Human and livestock\npathogens can\nimpact wildlife\nhealth",
                                        "Wildlife pathogens can\nimpact human health",
                                        "Wildlife pathogens can\nimpact livestock health"))))


#Plot

likert_theme <-
  theme_wsj() +
  theme(text = element_text(size = 20),
        plot.title = element_text(size = 20, hjust = 0.5, 
                                  margin = margin(5, 0, 10, 0), family = "arial", face = "plain"),
        plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"),
        panel.grid = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text = element_text(size=16, face = "plain"),
        axis.ticks.x = element_line(colour = "black"),
        axis.ticks.y = element_line(colour = "black"),
        axis.title.y  = element_text(colour = "grey10", angle = 180, size=18, family = "arial"),
        axis.title.x  = element_text(colour = "grey10", size=18, family = "arial"),
        axis.line.y.right  = element_line(colour="black"),
        strip.text = element_text(colour="grey95", size = 18),
        strip.text.y.left = element_text(angle = 0, hjust = 0),
        legend.position = "none")

custom_colors<-c("Human and livestock\npathogens can\nimpact wildlife\nhealth" ="cornflowerblue", 
                 "Wildlife health\nis important" = "darkgreen" ,
                 "Wildlife pathogens can\nimpact livestock health" = "orange3", 
                 "Wildlife pathogens can\nimpact human health"="#ee6b6e")

section_1$dummy<-"a"

p<-
  ggplot(section_1, 
         aes(x = dummy, 
             y = num_responses,
             fill=question, 
             color=question, 
             alpha=rank)) +
  geom_bar(stat = "identity", position=position_dodge(width = 0.97), width=0.6) +
  #coord_flip()+
  facet_grid(question~rank, switch = "y")+
  scale_y_continuous(position = "right") +
  likert_theme +
  theme(plot.margin=grid::unit(c(0,0,0,0), "mm"),
        axis.line.x = element_blank(),
        axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        axis.ticks.x = element_blank()) +
  # facet_grid(name ~ found, scales = "free_x", space = "free_x", switch = "y") +
  scale_fill_manual(values = custom_colors) +
  scale_color_manual(values = custom_colors) +
  # scale_y_continuous(position = "right") +
  scale_alpha_discrete(range = c(0.3, 1)) +  # Set min and max alpha values
  ggtitle("Agreement ranking") +
  labs(y = "Number of responses\n")






# Generate the ggplot2 plot grob
g <- grid.force(ggplotGrob(p))
# Get the names of grobs and their gPaths into a data.frame structure
grobs_df <- do.call(cbind.data.frame, grid.ls(g, print = FALSE))
# Build optimal gPaths that will be later used to identify grobs and edit them
grobs_df$gPath_full <- paste(grobs_df$gPath, grobs_df$name, sep = "::")
grobs_df$gPath_full <- gsub(pattern = "layout::", 
                            replacement = "", 
                            x = grobs_df$gPath_full, 
                            fixed = TRUE)

# Get the gPaths of the strip background grobs
strip_bg_gpath <- grobs_df$gPath_full[grepl(pattern = ".*strip\\.background.*", 
                                            x = grobs_df$gPath_full)]
# strip_bg_gpath[1] # example of a gPath for strip background 
## [1] "strip-t-1.7-5-7-5::strip.1-1-1-1::strip.background.x..rect.5374"

# Get the gPaths of the strip titles
strip_txt_gpath <- grobs_df$gPath_full[grepl(pattern = "strip.*titleGrob.*text.*",
                                             x = grobs_df$gPath_full)]
# strip_txt_gpath[1] # example of a gPath for strip title
## [1] "strip-t-1.7-5-7-5::strip.1-1-1-1::GRID.titleGrob.5368::GRID.text.5364"

#Now we can edit the grobs:

# Generate some color
# n_cols <- length(strip_bg_gpath[1:7])
# fills <- rainbow(n_cols)
#bkg_colors1 <- RColorBrewer::brewer.pal(n = 9, name = "Greys")[3:9]
bkg_colors1 <- paste0("grey",seq(from=80, to=10, by=-13))
bkg_colors2 <- c("orange3", "#ee6b6e", "cornflowerblue", "darkgreen")

# Edit the grobs
# for (i in 1:length(strip_bg_gpath)){
# for (i in 1:7){
#   #g <- editGrob(grob = g, gPath = strip_bg_gpath[i], gp = gpar(fill = fills[i-7]))
#    g <- editGrob(grob = g, gPath = strip_txt_gpath[i], gp = gpar(col = txt_colors1[i]))
# }

for (i in 1:6){
  #g <- editGrob(grob = g, gPath = strip_bg_gpath[i], gp = gpar(fill = fills[i-7]))
  g <- editGrob(grob = g, gPath = strip_bg_gpath[i], gp = gpar(fill = bkg_colors1[i]))
}

for (i in 7:10){
  #g <- editGrob(grob = g, gPath = strip_bg_gpath[i], gp = gpar(fill = fills[i-7]))
  g <- editGrob(grob = g, gPath = strip_bg_gpath[i], gp = gpar(fill = bkg_colors2[i-6]))
}


# for (i in 8:10){
#   #g <- editGrob(grob = g, gPath = strip_bg_gpath[i], gp = gpar(fill = fills[i-7]))
#   g <- editGrob(grob = g, gPath = strip_txt_gpath[i], gp = gpar(col = txt_colors2[i-7]))
# }


# Draw the edited plot
# grid.newpage(); 
# grid.draw(g)

g<-ggpubr::as_ggplot(g)

# Create a single y-axis title as a separate plot
y_title <- ggplot() + 
  likert_theme +
  theme(panel.background = element_rect(fill = "#F7F2E6", colour = NA),
        plot.title = element_text(size = 20, hjust = 0.5, 
                                  margin = margin(0, 0, 0, 0), family = "arial", face = "plain"),
        plot.margin = unit(c(0,0,0,0), "cm"),
        plot.background = element_rect(fill ="#F7F2E6", colour = NA),
        axis.title.y = element_blank(),
        axis.title.x = element_blank(),
        axis.ticks.x  = element_blank(),
        axis.ticks.y  = element_blank(),
        axis.line.x = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y= element_blank()) +
  
  geom_text(aes(x = 0.5, y = 0.5), label = "Item             ", angle = 90, size = 7) 

# y_title

# Combine the y-axis title and the plot using patchwork
mix <- y_title + g + plot_layout(widths = c(1, 15))  # Adjust widths as needed
mix <- mix + theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))


#mix
# if(!file.exists("../SMART_survey/plots/plot_section_1.png")) {

ggsave(plot = mix, filename = "plots/appedix_plot_1.png", width = 12.85714, height = 9, dpi=300)

```

#### Appendix S2. Level of agreement (grey scale) among non-local protected area data managers with the statements “Pathogens carried by wildlife inhabiting the protected area(s) where I work in can affect livestock health.” (brown), “Pathogens carried by wildlife inhabiting the protected area(s) where I work in can affect human health.” (red), “Human or livestock pathogens can affect wildlife populations inhabiting the protected area(s) where I work in.” (blue), and “Wildlife health is important to achieve the conservation goals of the protected area(s) where I work,” (green). 

```{r plot 1, out.width = "600px", fig.pos = "H"}
#| echo: false
#| message: false
#| warning: false
#| eval: true
#| out-extra: 'style="margin-top:0px;"'
#| fig-align: center

knitr::include_graphics("plots/appedix_plot_1.png")
```

```{=latex}
\newpage
```

### Encounters with injured, sick, or dead wildlife and documentation

```{r encounters with injured, sick, or dead wildlife and documentation appendix}
#| echo: false
#| message: false
#| warning: false
#| eval: false



source("R/load_packages.R")
library(ggthemes)
library(grid)
library(patchwork)
library(cowplot)

section_2 <-
  terrestrial_data |> filter(local==F) |> 
  select(dead_found,
         sick_injured_found,
         dead_wl_recorded,
         sick_wl_recorded,
         injured_wl_recorded)



dead_found_recorded<-
  section_2 |>
  # dplyr::select(-survey) |>
  dplyr::count(dead_found, dead_wl_recorded, name = "total_dead_found_recorded_group") |> 
  tidyr::complete(dead_found, dead_wl_recorded ) |> 
  tidyr::replace_na(replace = list(total_dead_found_recorded_group=0)) #|> 

sick_found_recorded<-
  section_2 |>
  # dplyr::select(-survey) |>
  dplyr::count(sick_injured_found, sick_wl_recorded, name = "total_sick_found_recorded_group") |> 
  tidyr::complete(sick_injured_found, sick_wl_recorded ) |> 
  tidyr::replace_na(replace = list(total_sick_found_recorded_group=0)) #|> 

injured_found_recorded<-
  section_2 |>
  # dplyr::select(-survey) |>
  dplyr::count(sick_injured_found, injured_wl_recorded, name = "total_injured_found_recorded_group") |> 
  tidyr::complete(sick_injured_found, injured_wl_recorded ) |> 
  tidyr::replace_na(replace = list(total_injured_found_recorded_group=0)) #|> 







freq_found_recorded<-full_join(
  dead_found_recorded, 
  sick_found_recorded, 
  by = c("dead_found" = "sick_injured_found",
         "dead_wl_recorded" = "sick_wl_recorded")) 

freq_found_recorded<-
  full_join(
    freq_found_recorded, 
    injured_found_recorded, 
    by = c("dead_found" = "sick_injured_found",
           "dead_wl_recorded" = "injured_wl_recorded")) |> 
  rename(found = dead_found) |> 
  rename(recorded=dead_wl_recorded) |> 
  rename(dead=total_dead_found_recorded_group) |> 
  rename(sick=total_sick_found_recorded_group) |>
  rename(injured=total_injured_found_recorded_group) #|> 
  
levels(freq_found_recorded$found) <- rev(c("Always",
                                           "Very frequently",
                                           "Occasionally",
                                           "Sometimes",
                                           "Rarely",
                                           "Very rarely",
                                           "Never"))
  
freq_found_recorded<-
freq_found_recorded |> 
  mutate(found=factor(found,
                      levels = rev(c("Always",
                                     "Very frequently",
                                     "Occasionally",
                                     "Sometimes",
                                     "Rarely",
                                     "Very rarely",
                                     "Never")),
                      labels = rev(c("Always",
                                     "Very\nfrequently",
                                     "Occasionally",
                                     "Sometimes",
                                     "Rarely",
                                     "Very\nrarely",
                                     "Never"))))



freq_found_recorded<-freq_found_recorded |> complete( found, recorded)

freq_found_recorded<-
  freq_found_recorded |>  
  tidyr::pivot_longer(cols=c("dead", "sick", "injured")) |> 
  arrange(found) |> 
  mutate(name=factor(name, 
                     levels = c("injured", "sick", "dead"),
                     labels = c("Injured*",
                                "Sick*",
                                "Dead"))) |> 
  mutate(value=replace_na(value, 0))



freq_found_recorded<-
  freq_found_recorded |> 
  arrange(name, found) |> 
  group_by(name, found) |> 
  mutate(prop = value/sum(value))




#Plot

likert_theme <-
  theme_wsj() +
  theme(text = element_text(size = 20),
        plot.title = element_text(size = 20, hjust = 0.5, 
                                  margin = margin(5, 0, 10, 0), family = "arial", face = "plain"),
        panel.grid = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text = element_text(size=16, face = "plain"),
        axis.ticks.x = element_line(colour = "black"),
        axis.ticks.y = element_line(colour = "black"),
        axis.title.y  = element_text(colour = "grey10", size=18, family = "arial"),
        axis.title.x  = element_text(colour = "grey10", size=18, family = "arial"),
        axis.line.y.right  = element_line(colour="black"),
        strip.text = element_text(colour="grey95", size = 18),
        strip.text.y.left = element_text(angle = 0, hjust = 0),
        legend.position = "none")


freq_found_recorded<-
  freq_found_recorded |>
  mutate(transparency=if_else(recorded=="No", 0.4,1))


# camcorder::gg_resize_film( height = 2.2/2*3,
#                            width = 6.4,
#                            units = "in")



# Create a new column combining `recorded` and `name` for unique colors
freq_found_recorded$combined <- with(freq_found_recorded, paste(recorded, name, sep = "_"))

custom_colors <- c(
  "No_Dead" = "#1f77b4",    # Blue for No - Dead wildlife
  "Yes_Dead" = "navyblue",   # Orange for Yes - Dead wildlife
  "No_Sick*" = "pink",   # Green for No - Sick wildlife
  "Yes_Sick*" = "#d62728",  # Red for Yes - Sick wildlife
  "No_Injured*" = "orange", # Purple for No - Injured wildlife
  "Yes_Injured*" = "orange3" # Brown for Yes - Injured wildlife
)

p<-
  ggplot(freq_found_recorded, 
         aes(x = recorded, 
             y = value, 
             fill = combined, 
             color = combined, 
             alpha=as.numeric(found))) +
  likert_theme +
  # theme(plot.margin=grid::unit(c(10,10,10,10), "mm")) +
  geom_bar(stat = "identity", position=position_dodge(width = 0.97)) +
  geom_bar(aes(y = prop*100/5,
               x = recorded), 
           stat="identity", 
           width = 0.2, 
           position = position_nudge(x = 0.6), 
           fill=ifelse(freq_found_recorded$recorded=="No", NA, "darkgreen"),
           colour=ifelse(freq_found_recorded$recorded=="No", NA, "darkgreen")) +
  facet_grid(name ~ found, scales = "free_x", space = "free_x", switch = "y") +
  scale_fill_manual(values = custom_colors) +
  scale_color_manual(values = custom_colors) +
  scale_y_continuous(position = "right") +
  scale_alpha_continuous(range = c(0.3, 0.9)) +  # Set min and max alpha values
  ggtitle("Overall encounter frequency in protected area(s)") +
  labs(x = "\nRecording", y = "Number of responses\n")

#
# p

# Generate the ggplot2 plot grob
g <- grid.force(ggplotGrob(p))
# Get the names of grobs and their gPaths into a data.frame structure
grobs_df <- do.call(cbind.data.frame, grid.ls(g, print = FALSE))
# Build optimal gPaths that will be later used to identify grobs and edit them
grobs_df$gPath_full <- paste(grobs_df$gPath, grobs_df$name, sep = "::")
grobs_df$gPath_full <- gsub(pattern = "layout::", 
                            replacement = "", 
                            x = grobs_df$gPath_full, 
                            fixed = TRUE)

# Get the gPaths of the strip background grobs
strip_bg_gpath <- grobs_df$gPath_full[grepl(pattern = ".*strip\\.background.*", 
                                            x = grobs_df$gPath_full)]

# Get the gPaths of the strip titles
strip_txt_gpath <- grobs_df$gPath_full[grepl(pattern = "strip.*titleGrob.*text.*",
                                             x = grobs_df$gPath_full)]

bkg_colors1 <- paste0("grey",seq(from=80, to=10, by=-11))
bkg_colors1 <- paste0("grey",seq(from=80, to=10, by=-11))

bkg_colors2 <- c("orange3", "#ee6b6e", "cornflowerblue")


for (i in 1:7){
  #g <- editGrob(grob = g, gPath = strip_bg_gpath[i], gp = gpar(fill = fills[i-7]))
  g <- editGrob(grob = g, gPath = strip_bg_gpath[i], gp = gpar(fill = bkg_colors1[i]))
}

for (i in 8:10){
  #g <- editGrob(grob = g, gPath = strip_bg_gpath[i], gp = gpar(fill = fills[i-7]))
  g <- editGrob(grob = g, gPath = strip_bg_gpath[i], gp = gpar(fill = bkg_colors2[i-7]))
}


g<-ggpubr::as_ggplot(g)



freq_found_recorded[is.nan(freq_found_recorded$prop),]$prop<-0

base<-
  ggplot(freq_found_recorded, 
         aes(x = recorded, 
             y = value, 
             fill = combined, 
             color = combined, 
             alpha=as.numeric(found))) +
  likert_theme +
  theme(#plot.margin=margin(t = 0, r = 10, b = 0, l = 300),
        axis.ticks.y = element_line(color = "darkgreen"),
        axis.title.y = element_text(color = "darkgreen", size=18, family = "arial"), 
        axis.text.y = element_text(color = "darkgreen", size=16, face = "plain"),
        axis.line.y.right = element_line(color = "darkgreen")) +# space between right border and yaxis
  geom_bar(aes(y = prop*100/5,
               x = recorded), 
           stat="identity", 
           width = 0.2) +
  facet_grid(name ~ found, scales = "free_x", space = "free_x", switch = "y") +
  scale_y_continuous(
    position = "right",
    trans = "reverse", 
    breaks = seq(0, 20, length.out = 5),  # These match your data (0 to 20)
    labels = function(x) sprintf("%.2f", 1 - x / 20)  # Convert to proportion, reversed
) +
  ggtitle("Overall encouner frequency in protected area") +
  labs(x = "\n ", y = "Proportion\n")

 # base

 
 # Generate the ggplot2 plot grob
 base <- grid.force(ggplotGrob(base))
 
 # Get the names of grobs and their gPaths into a data.frame structure
 grobs_df <- do.call(cbind.data.frame, grid.ls(base, print = FALSE))
 
 # Build optimal gPaths that will be later used to identify grobs and edit them
 grobs_df$gPath_full <- paste(grobs_df$gPath, grobs_df$name, sep = "::")
 grobs_df$gPath_full <- gsub(pattern = "layout::", 
                             replacement = "", 
                             x = grobs_df$gPath_full, 
                             fixed = TRUE)
 
 # Get the gPaths of the strip background grobs
 strip_bg_gpath <- grobs_df$gPath_full[grepl(pattern = ".*strip\\.background.*", 
                                             x = grobs_df$gPath_full)]

 
 # Get the gPaths of the strip titles
 strip_txt_gpath <- grobs_df$gPath_full[grepl(pattern = "strip.*titleGrob.*text.*",
                                              x = grobs_df$gPath_full)]

 
 base<-ggpubr::as_ggplot(base)
 
 # base
 
 


full<-
ggdraw() +
  # draw_plot(y_title)
  draw_plot(base) +
  draw_plot(g, x = 0.018, y = 0, width = 0.9, height = 1)  # Adjust 'x' to shift plot to the right

full<-full +  annotate("text", x = 0.012, y = 0.5, label = "Wildlife category", angle = 90, size = 7, family = "arial")


ggsave(plot = full, filename = "plots/appedix_plot_2.png", width = 16, height = 9)

# same plot but now with the proporcion label




```

#### Appendix S3. Number of non-local protected area data managers who reported that the health status of and frequency of encounters with wildlife are recorded or not recorded in the protected area they worked in. Green bars represent the proportion of respondents that reported recording of wildlife in each category. Overall frequency of encounters with sick and injured wildlife was requested in a unique question; therefore, rows one and two show the same total number of responses per encounter category.

```{r plot 2, out.width = "600px"}
#| echo: false
#| message: false
#| warning: false
#| eval: true
#| fig-align: center

knitr::include_graphics("plots/appedix_plot_2.png")

```

```{=latex}
\newpage
```

### Documentation methods

```{r documentation methods appendix}
#| echo: false
#| message: false
#| warning: false
#| eval: false


source("R/bar_chart_in_gt.R")
library(ggthemes)
library(grid)
library(paletteer)
library(gt)


collapse_rows_gt<-source("https://gist.githubusercontent.com/jmclawson/6852c14023d7d9b7e91bbcfa419adeb8/raw/7435c51c05ff5f537bd545c63325ea2ed4681a91/collapse_rows.R")

collapse_rows_gt<-collapse_rows_gt$value

source("R/create_datasets_for_table_1.R")


#healthy dataset
healthy<-create_status_tibble(status="healthy")

healthy<-
  healthy |> 
  mutate(across(where(is.double), ~replace_na(., 0))) |> 
  rename("how_wl_recorded" = "how_healthy_wl_recorded") |> 
  rename("condition" = "body_condition")|> 
  arrange(how_wl_recorded)



#injured dataset
injured<-create_status_tibble(status="injured")

injured<-
  injured |> 
  mutate(across(where(is.double), ~replace_na(., 0))) |>   # Replace NA with 0 for double columns
  rename("anomalies" ='anomalies_signs_if_any') |> 
  rename("suspected_cause" = contains("suspect_cause")) |> 
  rename("how_wl_recorded" = "how_injured_wl_recorded") |> 
  rename("condition" = "body_condition")|> 
  arrange(how_wl_recorded)



#sick dataset
sick<-create_status_tibble(status="sick")

sick<-
  sick |> 
  mutate(across(where(is.double), ~replace_na(., 0))) |>   # Replace NA with 0 for double columns
  rename("anomalies" ='anomalies_signs_if_any') |> 
  rename("suspected_cause" = contains("suspect_cause")) |> 
  rename("how_wl_recorded" = "how_sick_wl_recorded") |> 
  rename("condition" = "body_condition")|> 
  arrange(how_wl_recorded)





#dead dataset

# terrestrial_data |> 
#   select(contains("dead")) |> 
#   filter(dead_wl_recorded=="Yes") |> 
#   count(how_dead_wl_recorded)

dead<-create_status_tibble(status="dead")

dead<-
  dead |> 
  mutate(across(where(is.double), ~replace_na(., 0))) |>   # Replace NA with 0 for double columns
  rename("anomalies" ='anomalies_in_carcass_if_any') |> 
  rename("suspected_cause" = contains("suspect_cause")) |> 
  rename("how_wl_recorded" = "how_dead_wl_recorded") |> 
  rename("condition" = "carcass_condition") |> 
  arrange(how_wl_recorded)



full_data<-
  full_join(healthy, injured) |> 
  full_join(sick) |> 
  full_join(dead) 


number_recording_healthy<-
  terrestrial_data |> 
  filter(local == FALSE) |> 
  count(healthy_wl_recorded) |> 
  filter(healthy_wl_recorded=="Yes") |> 
  pull(n)

number_recording_injured<-
  terrestrial_data |> 
  filter(local == FALSE) |> 
  count(injured_wl_recorded) |> 
  filter(injured_wl_recorded=="Yes") |> 
  pull(n)


number_recording_sick<-
  terrestrial_data |> 
  filter(local == FALSE) |> 
  count(sick_wl_recorded) |> 
  filter(sick_wl_recorded=="Yes") |> 
  pull(n)


number_recording_dead<-
  terrestrial_data |> 
  filter(local == FALSE) |> 
  count(dead_wl_recorded) |> 
  filter(dead_wl_recorded=="Yes") |> 
  pull(n)


number_recording_at_least_one_non_healthly_cat<-
  terrestrial_data |> 
  filter(local == FALSE) |> 
  filter(sick_wl_recorded=="Yes" | injured_wl_recorded=="Yes" | dead_wl_recorded=="Yes") |> 
  select(sick_wl_recorded, 
         injured_wl_recorded,
         dead_wl_recorded) |> 
  nrow()


full_data[full_data$status=="Healthy",]$status<-paste0("Healthy (n = ", number_recording_healthy, ")")
full_data[full_data$status=="Injured",]$status<-paste0("Injured (n = ", number_recording_injured, ")")
full_data[full_data$status=="Sick",]$status<-paste0("Sick (n = ", number_recording_sick, ")")
full_data[full_data$status=="Dead",]$status<-paste0("Dead (n = ", number_recording_dead, ")")




## TABLES ##




prop_how_recorded_colors<-
  purrr::map(c("#000080", "#d62728", "#C76E00", "#06402B"), \(x) rep(x, 4)) |> unlist() |> rev()

prop_what_recorded_colors<-
  purrr::map(c("#1f77b4", "pink", "orange", "#ABDDA4"), \(x) rep(x, 4)) |> unlist() |> rev()



full_table<-
  full_data |> 
  mutate(
    prop_how_recorded = 
      purrr::map2_chr(.x = full_data$prop_how_recorded*100, 
                      .y = prop_how_recorded_colors, .f = 
                        ~bar_chart(label = .x, 
                                   fill = .y, 
                                   background = "#d2d2d2")) |> 
      purrr::map(gt::html),
    
    species = purrr::map2_chr(.x = full_data$species*100, 
                              .y = prop_what_recorded_colors, .f = 
                                ~bar_chart(label = .x, 
                                           fill = .y, 
                                           background = "#d2d2d2")) |> 
      purrr::map(gt::html),
    
    
    age = purrr::map2_chr(.x = full_data$age*100, 
                          .y = prop_what_recorded_colors, .f = 
                            ~bar_chart(label = .x, 
                                       fill = .y, 
                                       background = "#d2d2d2")) |> 
      purrr::map(gt::html),
    
    sex = purrr::map2_chr(.x = full_data$sex*100, 
                          .y = prop_what_recorded_colors, .f = 
                            ~bar_chart(label = .x, 
                                       fill = .y, 
                                       background = "#d2d2d2")) |> 
      purrr::map(gt::html),
    
    condition = purrr::map2_chr(.x = full_data$condition*100, 
                                .y = prop_what_recorded_colors, .f = 
                                  ~bar_chart(label = .x, 
                                             fill = .y, 
                                             background = "#d2d2d2")) |> 
      purrr::map(gt::html),
    
    anomalies = purrr::map2_chr(.x = full_data$anomalies*100, 
                                .y = prop_what_recorded_colors, .f = 
                                  ~bar_chart(label = .x, 
                                             fill = .y, 
                                             background = "#d2d2d2")) |> 
      purrr::map(gt::html),
    
    photographs = purrr::map2_chr(.x = full_data$photographs*100, 
                                  .y = prop_what_recorded_colors, .f = 
                                    ~bar_chart(label = .x, 
                                               fill = .y, 
                                               background = "#d2d2d2")) |> 
      purrr::map(gt::html),
    
    other = purrr::map2_chr(.x = full_data$other*100, 
                            .y = prop_what_recorded_colors, .f = 
                              ~bar_chart(label = .x, 
                                         fill = .y, 
                                         background = "#d2d2d2")) |> 
      purrr::map(gt::html)) |> 
  dplyr::select(
    status,
    how_wl_recorded,
    prop_how_recorded, 
    species,
    age,
    sex,
    condition,
    anomalies,
    photographs,
    other) |>
  gt() |> 
  cols_align(align = "left") |> 
  cols_label(
    status = "Wildlife<br>status",
    species = "Species",
    age = "Age",
    sex = "Sex", 
    condition = "Condition",
    anomalies = "Anomalies",
    photographs = "Photographs",
    other = "Other",
    .fn = md) |> 
  tab_spanner(label = md("**Documentation method used (%)**"),
              columns = c(how_wl_recorded,
                          prop_how_recorded)) |> 
  tab_spanner(label = md("**Data recorded (%)**"),
              columns = c(species,
                          age,
                          sex,
                          condition,
                          anomalies,
                          photographs,
                          other)) |>
  cols_label(
    how_wl_recorded = "",
    prop_how_recorded = "") |> 
  cols_width(everything() ~ px(140)) |> 
  collapse_rows_gt(status)


fix_anomalies_for_healthy<-gt::html("<div style='display:flex;align-items:left;'><div style='position:relative;flex-grow:1;margin-left:8px;background:white;'><div style='position:absolute;width:0;height:30px;border-left:2px solid white;left:50%;top:0;'></div><div style='background:white;width:NA%;height:30px;'></div></div></div>")
full_table$`_data`$anomalies[[1]]<-fix_anomalies_for_healthy
full_table$`_data`$anomalies[[2]]<-fix_anomalies_for_healthy
full_table$`_data`$anomalies[[3]]<-fix_anomalies_for_healthy
full_table$`_data`$anomalies[[4]]<-fix_anomalies_for_healthy

# test<-as_gtable(full_table)
# library(patchwork)
# wrap_elements(full_table)
#   
# patchwork::wrap_ggplot_grob(full_table)
# 
# class(full_table)
# test<-gtExtras::gt_reprex_image(full_table)
# gtExtras::gtsave_extra(full_table, "v2/table1.png")
# 
# gtsave(full_table, "v2/table1.rtf")
# png("v2/table1.png", width = 10, height = 7, units = 'in', res = 300)

str(full_table)

# install.packages("chromote")
# library(chromote)
# gtsave(full_table, filename = "plots/my_table.png")


# Convert to PNG using 'pdftools' and 'magick'
# library(pdftools)
# library(magick)
# 
# gtsave(full_table, filename = "my_table.pdf")
# img <- image_read_pdf("my_table.pdf", density = 300)
# image_write(img, path = "my_table.png", format = "png")

library(webshot2)
gtsave(full_table, "plots/my_table_appendix.html")

# Then manually take a larger screenshot (height set manually)
webshot2::webshot("plots/my_table_appendix.html", 
                  file = "plots/appedix_plot_3.png", 
                  vwidth = 1400, 
                  vheight = 3000, 
                  zoom = 4)

```

#### Appendix S4. Distribution of the methods of documentation (second column) of healthy, sick, injured, or dead wildlife found during ranger patrols as reported by non-local protected area data managers and the recording of specific types of data for each wildlife health status across documentation methods (black line, 50%).

```{r plot 3, out.width = "600px"}
#| echo: false
#| message: false
#| warning: false
#| eval: true
#| fig-align: center

knitr::include_graphics("plots/appedix_plot_3.png")

```

```{=latex}
\newpage
```

### Domestic animals in protected areas

```{r domestic animals in protected areas appendix}
#| echo: false
#| message: false
#| warning: false
#| eval: false

source("R/load_packages.R")
library(ggthemes)
library(grid)
library(patchwork)



section_3 <-
  terrestrial_data |> filter(local==F) |> 
  select(dom_animals_concern,
         dom_animals_in_pa,
         dom_animals_recorded,
         dom_animal_health_status_recorded)

section_3<-section_3  |> 
  mutate(dom_animals_concern=factor(dom_animals_concern,
                                    levels = rev(c("Strongly agree",
                                                   "Agree",
                                                   "Neutral",
                                                   "Somewhat Disagree",
                                                   "Disagree",
                                                   "Strongly disagree")),
                                    labels = rev(c("Strongly\nagree",
                                                   "Agree",
                                                   "Neutral",
                                                   "Somewhat\ndisagree",
                                                   "Disagree",
                                                   "Strongly\ndisagree"))))






dom_found_recorded<-
  section_3 |>
  dplyr::count(dom_animals_concern, 
               dom_animals_in_pa,
               dom_animals_recorded, 
               dom_animal_health_status_recorded,
               name = "n_concern_dom_animals_recorded") |> 
  group_by(dom_animals_in_pa) |> 
  complete(dom_animals_concern,
           nesting(dom_animals_recorded,
                   dom_animal_health_status_recorded)) |> 
  ungroup() |>  
  select(dom_animals_concern, 
         dom_animals_in_pa, 
         dom_animals_recorded, 
         dom_animal_health_status_recorded,
         n_concern_dom_animals_recorded) |> 
  arrange(dom_animals_concern, dom_animals_in_pa) |> 
  replace_na(list(n_concern_dom_animals_recorded=0))



dom_not_found<-dom_found_recorded |> 
  filter(dom_animals_in_pa=="No")

sum(dom_not_found$n_concern_dom_animals_recorded)

dom_found<-dom_found_recorded |> 
  filter(dom_animals_in_pa=="Yes")

dom_found[dom_found$dom_animal_health_status_recorded=="Yes",]$dom_animal_health_status_recorded<-"Presence and health status"
dom_found[dom_found$dom_animal_health_status_recorded=="No",]$dom_animal_health_status_recorded<-"Presence only"
dom_found[dom_found$dom_animal_health_status_recorded=="",]$dom_animal_health_status_recorded<-"No recording"

dom_found<-dom_found  |> 
  mutate(dom_animal_health_status_recorded=factor(dom_animal_health_status_recorded,
                                                  levels = c("No recording",
                                                             "Presence only",
                                                             "Presence and health status"),
                                                  labels = c("No recording",
                                                             "Presence only",
                                                             "Presence and\nhealth status")))


## PLOT 

custom_colors <- c(
  "No recording" = "#d62728",
  "Presence only" = "cornflowerblue",
  "Presence and\nhealth status" = "navyblue")

likert_theme <-
  # theme_gray() + 
  theme_wsj() +
  theme(text = element_text(size = 20),
        plot.title = element_text(size = 20, hjust = 0.5, 
                                  margin = margin(5, 0, 10, 0), family = "arial", face = "plain"),
        plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"),
        #plot.margin = unit(c(2.4,0,2.4,.4), "cm"),
        # plot.background = element_rect(linewidth = 2, color = "black"),
        panel.grid = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
        axis.text = element_text(size=16, face = "plain"),
        axis.ticks.x = element_line(colour = "black"),
        axis.ticks.y = element_line(colour = "black"),
        axis.title.y  = element_text(colour = "grey10", angle = 90, size=18, family = "arial"),
        axis.title.x  = element_text(colour = "grey10", size=18, family = "arial"),
        #panel.background = element_blank(),
        #strip.background  = element_blank(),
        axis.line.y.left   = element_line(colour="black"),
        strip.text = element_text(colour="grey95", size = 18),
        #strip.text.x = element_text(colour="grey75"),
        strip.text.y.left = element_text(angle = 0, hjust = 0),
        legend.position = "none")


p<-
  ggplot(dom_found , 
         aes(x = dom_animal_health_status_recorded, 
             y = n_concern_dom_animals_recorded,
             fill = dom_animal_health_status_recorded,
             colour = dom_animal_health_status_recorded,
             alpha = as.numeric(dom_animals_concern))) +
  geom_bar(stat = "identity", position="stack", width = 0.97) +
  #facet_grid(.~dom_animals_concern, switch = "y")
  facet_grid(.~dom_animals_concern, 
             scales = "free_x", 
             space = "free_x", switch = "y") +
  scale_fill_manual(values = custom_colors) +
  scale_color_manual(values = custom_colors) +
  likert_theme +
  theme(plot.margin=grid::unit(c(0.5,0.5,0.5,0.5), "mm")) +
  scale_alpha_continuous(range = c(0.3, 0.9)) +  # Set min and max alpha values
  # ggtitle("Overall agreement domestic animals are a conservation concern") +
  labs(x = "\nRecording", y = "Number of responses\n")

# p


# Generate the ggplot2 plot grob
g <- grid.force(ggplotGrob(p))

# Get the names of grobs and their gPaths into a data.frame structure
grobs_df <- do.call(cbind.data.frame, grid.ls(g, print = FALSE))

# Build optimal gPaths that will be later used to identify grobs and edit them
grobs_df$gPath_full <- paste(grobs_df$gPath, grobs_df$name, sep = "::")
grobs_df$gPath_full <- gsub(pattern = "layout::", 
                            replacement = "", 
                            x = grobs_df$gPath_full, 
                            fixed = TRUE)

# Get the gPaths of the strip background grobs
strip_bg_gpath <- grobs_df$gPath_full[grepl(pattern = ".*strip\\.background.*", 
                                            x = grobs_df$gPath_full)]

# strip_bg_gpath[1] # example of a gPath for strip background 
## [1] "strip-t-1.7-5-7-5::strip.1-1-1-1::strip.background.x..rect.5374"

# Get the gPaths of the strip titles
strip_txt_gpath <- grobs_df$gPath_full[grepl(pattern = "strip.*titleGrob.*text.*",
                                             x = grobs_df$gPath_full)]

# strip_txt_gpath[1] # example of a gPath for strip title
## [1] "strip-t-1.7-5-7-5::strip.1-1-1-1::GRID.titleGrob.5368::GRID.text.5364"

#Now we can edit the grobs:

# Generate some color
# n_cols <- length(strip_bg_gpath[1:7])
# fills <- rainbow(n_cols)
#bkg_colors1 <- RColorBrewer::brewer.pal(n = 9, name = "Greys")[3:9]
bkg_colors1 <- paste0("grey",seq(from=80, to=10, by=-13))
# bkg_colors2 <- c("#ee6b6e", "cornflowerblue")


for (i in 1:6){
  #g <- editGrob(grob = g, gPath = strip_bg_gpath[i], gp = gpar(fill = fills[i-7]))
  g <- editGrob(grob = g, gPath = strip_bg_gpath[i], gp = gpar(fill = bkg_colors1[i]))
}

# for (i in 7:8){
#   #g <- editGrob(grob = g, gPath = strip_bg_gpath[i], gp = gpar(fill = fills[i-7]))
#   g <- editGrob(grob = g, gPath = strip_bg_gpath[i], gp = gpar(fill = bkg_colors2[i-6]))
# }


# for (i in 8:10){
#   #g <- editGrob(grob = g, gPath = strip_bg_gpath[i], gp = gpar(fill = fills[i-7]))
#   g <- editGrob(grob = g, gPath = strip_txt_gpath[i], gp = gpar(col = txt_colors2[i-7]))
# }


# Draw the edited plot
# grid.newpage(); 
# grid.draw(g)

g<-ggpubr::as_ggplot(g)


ggsave(plot = g, filename = "plots/appedix_plot_4.png", width = 12, height = 5)


```

#### Appendix S5. Responses of non-local protected area data manager to statements that the presence and health of domestic animals in protected areas is a conservation concern (red, no recording of domestic animals; light blue, recording of domestic animals but not their health status; dark blue, recording of domestic animals and their health status). Data are from the group of protected area data managers who reported the presence of domestic animals in the protected area.

```{r plot 4, out.width = "600px"}
#| echo: false
#| message: false
#| warning: false
#| eval: true
#| fig-align: center

knitr::include_graphics("plots/appedix_plot_4.png")

```

```{=latex}
\newpage
```

# Discussion

```{r discussion appendix plot 1}
#| echo: false
#| message: false
#| warning: false
#| eval: true


dom_animals<-
  terrestrial_data |> 
  # filter(local==T) |> 
  select(
    dom_animals_concern,
    dom_animals_in_pa,
    dom_animals_recorded,
    dom_animal_health_status_recorded,
    wildlife_path_affect_livestock,
    hum_liv_path_affect_wildlife
    ) #|> 

dom_animals<-
  dom_animals |> 
  count(dom_animals_concern,
        hum_liv_path_affect_wildlife,
        dom_animals_in_pa, name = "value") |> 
        #dom_animals_recorded, #name = "value") |> 
        #dom_animal_health_status_recorded, name = "value") |> 
  complete(dom_animals_in_pa,
           dom_animals_concern,
           hum_liv_path_affect_wildlife,
                   #dom_animals_recorded,
                   #dom_animal_health_status_recorded),
           fill = list(value = 0))


dom_animals <- dom_animals  |> 
  mutate(dom_animals_concern=factor(dom_animals_concern,
                                    levels = c("Strongly agree",
                                                   "Agree",
                                                   "Neutral",
                                                   "Somewhat Disagree",
                                                   "Disagree",
                                                   "Strongly disagree"),
                                    labels = c("Strongly\nagree",
                                                   "Agree",
                                                   "Neutral",
                                                   "Somewhat\ndisagree",
                                                   "Disagree",
                                                   "Strongly\ndisagree"))) |> 
  mutate(hum_liv_path_affect_wildlife=factor(hum_liv_path_affect_wildlife,
                                    levels = c("Strongly agree",
                                               "Agree",
                                               "Neutral",
                                               "Somewhat Disagree",
                                               "Disagree",
                                               "Strongly disagree"),
                                    labels = c("Strongly\nagree",
                                               "Agree",
                                               "Neutral",
                                               "Somewhat\ndisagree",
                                               "Disagree",
                                               "Strongly\ndisagree"))) 


dom_animals <- dom_animals |> 
  group_by(dom_animals_in_pa) |> 
  arrange(dom_animals_concern) |> 
  # print(n = 50) |> 
  group_split()



likert_theme <-
  theme_gray() +
  theme(text = element_text(size = 12),
        plot.title = element_text(size = 13, hjust = 0.5, 
                                  margin = margin(0, 0, 0, 0)),
        plot.margin = unit(c(0.5,0.5,0.2,0.5), "cm"),
        plot.background = element_rect(linewidth = 1, color = "black"),
        panel.grid = element_blank(),
        axis.text = element_text(size = 8),
        # axis.text.y = element_text(colour = rep(c("red", "blue"), times=3)),
        # axis.ticks.x = element_blank(),
        axis.title  = element_text(size = 10, hjust = 0.5),
        panel.background = element_blank(),
        strip.background  = element_blank(),
        strip.text.y.left = element_text(angle = 0, hjust = 0),
        legend.position = "None")


z_limits <- range(c(dom_animals[[2]]$value, dom_animals[[2]]$value))


new_plot_1<-
ggplot(dom_animals[[1]], 
       aes(dom_animals_concern, 
           hum_liv_path_affect_wildlife, 
           fill= value)) + 
  likert_theme + 
  geom_tile() +
  scale_fill_gradient(low="white", high="blue") +
  labs(y = "Overall agreement with 'human and\nlivestock pathogens can affect wildlife populations'\n", 
       x = "\nOverall agreement with 'Introduced domestic\nanimals are a concern'",
       title = "Domestic animals are not found in the protected area\n")


# new_plot_1

ggsave("plots/appedix_plot_5.png",
       plot = new_plot_1,
       # height = 8,
       # width = 13,
       # units = "in",
       dpi = 600)


```

#### Appendix S6. Distribution of protected area data managers responses (local and non-local) across their overall agreement with the statements "Human or livestock pathogens can affect wildlife populations inhabiting the protected area I work in" and "Introduced domestic animals are a concern for the conservation goals of the protected area" for those protected area managers (local and non-local) that reported the absence of domestic animals in the protected area.
```{r plot 5, out.width = "500px"}
#| echo: false
#| message: false
#| warning: false
#| eval: true
#| fig-align: center

knitr::include_graphics("plots/appedix_plot_5.png")


```

```{r discussion appendix plot 2}
#| echo: false
#| message: false
#| warning: false
#| eval: true

new_plot_2<-
  ggplot(dom_animals[[2]], 
         aes(dom_animals_concern, 
             hum_liv_path_affect_wildlife, 
             fill= value)) + 
  likert_theme + 
  geom_tile() +
  scale_fill_gradient(low="white", high="blue") +
  labs(y = "Overall agreement with 'human and\nlivestock pathogens can affect wildlife populations'\n", 
       x = "\nOverall agreement with 'Introduced domestic\nanimals are a concern'",
       title = "Domestic animals are found in the protected area\n")

# new_plot_2

ggsave("plots/appedix_plot_6.png",
       plot = new_plot_2,
       # height = 8,
       # width = 13,
       # units = "in",
       dpi = 600)

```

```{=latex}
\newpage
```

#### Appendix S7. Distribution of protected area data managers responses (local and non-local) across their overall agreement with "Human or livestock pathogens can affect wildlife populations inhabiting the protected area I work in" and "Introduced domestic animals are a concern for the conservation goals of the protected area" for those protected area data managers that reported the presence of domestic animals in the protected area.

```{r plot 6, out.width = "500px"}
#| echo: false
#| message: false
#| warning: false
#| eval: true
#| fig-align: center

knitr::include_graphics("plots/appedix_plot_6.png")

```
